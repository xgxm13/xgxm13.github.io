{
    "version": "https://jsonfeed.org/version/1",
    "title": "筱何仔 • All posts by \"前端\" tag",
    "description": "",
    "home_page_url": "https://blog.mengcodes.com",
    "items": [
        {
            "id": "https://blog.mengcodes.com/Web/Js/2023/09/04/2/",
            "url": "https://blog.mengcodes.com/Web/Js/2023/09/04/2/",
            "title": "Js 检测数据类型的方法和区别",
            "date_published": "2023-09-04T10:44:35.000Z",
            "content_html": "<p>JS 的数据类型判断有 typeof ()、instanceof ()、constructor、Object.prototype.toString.call () 等方法，但是他们也有区别。<br />\n<a id=\"more\"></a></p>\n<ul>\n<li>参考 CSDN <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqeV9hbmRyb2lkX2Jsb2cvYXJ0aWNsZS9kZXRhaWxzLzgxMDIzMTc3\">zhongjunyao</span></li>\n</ul>\n<h1 id=\"typeof\"><a class=\"anchor\" href=\"#typeof\">#</a> typeof</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">2</span>);               <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>);            <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;str&#x27;</span>);           <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> []);              <span class=\"comment\">// object     数组的数据类型在 typeof 中被解释为 object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);    <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> &#123;&#125;);              <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>);       <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);            <span class=\"comment\">// object     null 的数据类型被 typeof 解释为 object</span></span><br></pre></td></tr></table></figure></p>\n<div class=\"note danger\">\n<ul>\n<li><ins class=\"primary\">数字 Number，布尔值 Boolean，字符串 String，函数 Function，对象 Object，Undefined</ins> 这一些数据类型在 typeof 下都被精准的解释，只有数组和 null 的数据类型不够精准。其实 typeof 对于数组 和 null 的类型判断是正确的，只不过不够精准而已。</li>\n</ul>\n</div>\n<h1 id=\"instanceof\"><a class=\"anchor\" href=\"#instanceof\">#</a> instanceof</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>);                    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span>);                <span class=\"comment\">// false </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;str&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>);                <span class=\"comment\">// false  </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);                    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>);       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);                   <span class=\"comment\">// true    </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> <span class=\"keyword\">instanceof</span> Undefined);         <span class=\"comment\">// Uncaught ReferenceError: Undefined is not defined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> <span class=\"keyword\">instanceof</span> Null);                   <span class=\"comment\">// Uncaught ReferenceError: Null is not defined</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>直接的字面量值判断数据类型，只有<ins class=\"primary\">引用数据类型（Array，Function，Object）</ins>被精准判断，<ins class=\"primary\">其他（数值 Number，布尔值 Boolean，字符串 String）</ins>字面值不能被 instanceof 精准判断。</li>\n<li>instanceof 在 MDN 中的解释：<ins class=\"dot\">instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</ins>其意思就是判断对象是否是某一数据类型（如 Array）的实例，请重点关注一下是判断一个<span class=\"red\">对象</span>是否是数据类型的实例。</li>\n<li>上面案例可以更改如下：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">2</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>);               <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span>);          <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;str&#x27;</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>);           <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></li>\n<li>对于 null 和 undefined</li>\n</ul>\n<div class=\"note info\">\n<ul>\n<li>浏览器认为 null，undefined 不是构造器。但是在 typeof 中你可能已经发现了，typeof null 的结果是 object，typeof undefined 的结果是 undefined ，这是怎么回事呢？</li>\n<li>尤其是 null，其实这是 js 发展过程中设计者的重大失误，早期准备更改 null 的类型为 null，由于当时已经有大量网站使用了 null，如果更改，将导致很多网站的逻辑出现漏洞问题，就没有更改过来，于是一直遗留到现在。作为学习者，我们只需要记住就好。</li>\n</ul>\n</div>\n<h1 id=\"constructor\"><a class=\"anchor\" href=\"#constructor\">#</a> constructor</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">2</span>).constructor === <span class=\"built_in\">Number</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"literal\">true</span>).constructor === <span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"string\">&#x27;str&#x27;</span>).constructor === <span class=\"built_in\">String</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(([]).constructor === <span class=\"built_in\">Array</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;).constructor === <span class=\"built_in\">Function</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((&#123;&#125;).constructor === <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>用 costructor 来判断类型看起来是完美的，然而，如果我创建一个对象，更改它的原型，这种方式也变得不可靠了。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">Fn.prototype=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> f=<span class=\"keyword\">new</span> Fn();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f.constructor===Fn);    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f.constructor===<span class=\"built_in\">Array</span>); <span class=\"comment\">// true </span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"objectprototypetostringcall\"><a class=\"anchor\" href=\"#objectprototypetostringcall\">#</a> Object.prototype.toString.call</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"number\">2</span>));               <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">true</span>));            <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"string\">&#x27;str&#x27;</span>));           <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call([]));              <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;));    <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(&#123;&#125;));              <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">undefined</span>));       <span class=\"comment\">// [object Undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">null</span>));            <span class=\"comment\">// [object Null]</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>使用 Object 对象的原型方法 toString ，使用 call 进行狸猫换太子，借用 Object 的 toString  方法，结果精准的显示我们需要的数据类型。</li>\n</ul>\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Js"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Css/2023/09/04/1/",
            "url": "https://blog.mengcodes.com/Web/Css/2023/09/04/1/",
            "title": "Css 预处理语言Sass、Less、Stylus区别",
            "date_published": "2023-09-04T08:15:39.000Z",
            "content_html": "<ul>\n<li>CSS 预处理器框架，分别是 Sass、Less 、Stylus。CSS 预处理器为 CSS 提供了更多的更加灵活的可编程性。增加了变量、嵌套、运算、混入 (Mixin)、继承、颜色处理、函数等特性。<br />\n<a id=\"more\"></a><br />\n 参考 CSDN <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTA4OTkyOC9hcnRpY2xlL2RldGFpbHMvODgzNzk1NjQ=\">吴小花的博客</span></li>\n</ul>\n<h1 id=\"背景介绍\"><a class=\"anchor\" href=\"#背景介绍\">#</a> 背景介绍</h1>\n<ul>\n<li><span class=\"red\">Sass：</span>2007 年诞生，最早也是最成熟的 CSS 预处理器，拥有 ruby 社区的支持和 compass 这一最强大的 css 框架。目前受 LESS 影响，已经进化到了全面兼容 CSS 的 SCSS（SCSS 需要使用分号和花括号而不是换行和缩进）。</li>\n<li><span class=\"red\">Less：</span>2009 年出现，受 SASS 的影响较大，但又使用 CSS 的语法，让大部分开发者和设计师更容易上手，在 ruby 社区之外支持者远超过 SASS。其缺点是比起 SASS 来，可编程功能不够。不过优点是简单和兼容 CSS，反过来也影响了 SASS 演变到了 SCSS 的时代，著名的 Twitter Bootstrap 就是采用 LESS 做底层语言的</li>\n<li><span class=\"red\">Stylus：</span>2010 年产生，来自 Node.js 社区。主要用来给 Node 项目进行 CSS 预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如 SASS 和 LESS。</li>\n</ul>\n<h1 id=\"语法区别\"><a class=\"anchor\" href=\"#语法区别\">#</a> 语法区别</h1>\n<ul>\n<li>Sass 和 Less 都使用的是标准的 CSS 语法， Sass 同时也支持老的语法，就是不包含花括号和分号的方式。</li>\n<li>Stylus 支持的语法要更多样性一点，它默认使用 .styl 的文件扩展名<br />\n下面是 Stylus 支持的语法：<br />\n<figure class=\"highlight\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* style.styl */</span></span><br><span class=\"line\">h1 &#123;</span><br><span class=\"line\">  color: #0982C1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* omit brackets */</span></span><br><span class=\"line\">h1</span><br><span class=\"line\">  color: #0982C1;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* omit colons and semi-colons */</span></span><br><span class=\"line\">h1</span><br><span class=\"line\">  color #0982C1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"变量的定义\"><a class=\"anchor\" href=\"#变量的定义\">#</a> 变量的定义</h1>\n<ul>\n<li>Sass 的变量必须是 $ 开始，然后变量名和值使用冒号隔开，跟 CSS 的属性一致：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">$mainColor: #0982c1;</span><br><span class=\"line\"><span class=\"comment\">//使用：</span></span><br><span class=\"line\">color: $mainColor;</span><br></pre></td></tr></table></figure></li>\n<li>Less 的变量名使用 @ 符号开始：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">@mainColor: #0982c1;</span><br><span class=\"line\"><span class=\"comment\">//使用：</span></span><br><span class=\"line\">color: @mainColor;</span><br></pre></td></tr></table></figure></li>\n<li>Stylus 对变量名没有任何限定，你可以是 $ 开始，也可以是任意的字符 (在 Stylus 的变量名不要用 @ 开头)，而且与变量值之间可以用冒号、空格隔开<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">mainColor = #0982c1</span><br><span class=\"line\">$mainColor = #0982c1</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">color mainColor</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"嵌套\"><a class=\"anchor\" href=\"#嵌套\">#</a> 嵌套</h1>\n<p>Sass、Less、Stylus 都可以嵌套</p>\n<h1 id=\"mixins混入\"><a class=\"anchor\" href=\"#mixins混入\">#</a> mixins 混入</h1>\n<ul>\n<li>Sass 的混入语法<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">@mixin <span class=\"function\"><span class=\"title\">error</span>(<span class=\"params\">$borderWidth: 2px</span>)</span> &#123;</span><br><span class=\"line\">  border: $borderWidth solid #F00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用 </span></span><br><span class=\"line\">@ include error(); </span><br><span class=\"line\"> </span><br><span class=\"line\">@ include error(5px); </span><br></pre></td></tr></table></figure></li>\n<li>Less 的混入语法<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">.error(@borderWidth: 2px) &#123;</span><br><span class=\"line\">  border: @borderWidth solid #F00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//引用</span></span><br><span class=\"line\">.error(); </span><br><span class=\"line\"> </span><br><span class=\"line\">.error(5px); </span><br></pre></td></tr></table></figure></li>\n<li>Stylus 的混入语法<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">error</span>(<span class=\"params\">borderWidth= 2px</span>)</span> &#123;</span><br><span class=\"line\">  border: borderWidth solid #F00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">  error(); </span><br><span class=\"line\"> </span><br><span class=\"line\">  error(5px); </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h1>\n<ul>\n<li>在 Sass 和 Stylus 我们可以这样写：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.block &#123;</span><br><span class=\"line\">  padding: 2px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  @extend .block; <span class=\"comment\">/* Inherit styles from &#x27;.block&#x27; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>less 写法<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.block &#123;</span><br><span class=\"line\">  padding: 2px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  .block; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"导入-import\"><a class=\"anchor\" href=\"#导入-import\">#</a> 导入 import</h1>\n<ul>\n<li>导入需要多次的 HTTP 请求。但是在 CSS 预处理器中的导入操作则不同，它只是在语义上包含了不同的文件，但最终结果是一个单一的 CSS 文件，如果你是通过 @ import &quot;file.css&quot;; 导入 CSS 文件，那效果跟普通的 CSS 导入一样。</li>\n<li>注意：导入文件中定义的混入、变量等信息也将会被引入到主样式文件中，因此需要避免它们互相冲突。</li>\n</ul>\n<p>reset.css:</p>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* file.&#123;type&#125; */</span></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: #EEE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL21haW4ueHh4\">main.xxx</span><br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@ <span class=\"keyword\">import</span> <span class=\"string\">&quot;reset.css&quot;</span>;</span><br><span class=\"line\">@ <span class=\"keyword\">import</span> <span class=\"string\">&quot;file.&#123;type&#125;&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  background: #0982C1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 最终生成的 CSS:<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ <span class=\"keyword\">import</span> <span class=\"string\">&quot;reset.css&quot;</span>;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: #EEE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  background: #0982C1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"颜色函数\"><a class=\"anchor\" href=\"#颜色函数\">#</a> 颜色函数</h1>\n<p>CSS 预处理器一般都会内置一些颜色处理函数用来对颜色值进行处理，例如加亮、变暗、颜色梯度等。</p>\n<ul>\n<li>Sass<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighten($color, <span class=\"number\">10</span>%); <span class=\"comment\">/* 比$color更亮10% */</span></span><br><span class=\"line\">darken($color, <span class=\"number\">10</span>%);  <span class=\"comment\">/* 更黑 */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">saturate($color, <span class=\"number\">10</span>%);   <span class=\"comment\">/* returns a color 10% more saturated 饱和的 深的;浓的 than $color */</span></span><br><span class=\"line\">desaturate($color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% less saturated than $color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">grayscale($color);  <span class=\"comment\">/* returns grayscale 灰度 of $color */</span></span><br><span class=\"line\">complement($color); <span class=\"comment\">/* returns complement 补足 color of $color */</span></span><br><span class=\"line\">invert($color);     <span class=\"comment\">/* returns inverted 反向的，倒转的，颠倒的 color of $color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mix($color1, $color2, <span class=\"number\">50</span>%); <span class=\"comment\">/* mix $color1 with $color2 with a weight of 50% */</span></span><br></pre></td></tr></table></figure></li>\n<li>Less<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighten(@color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% lighter than @color */</span></span><br><span class=\"line\">darken(@color, <span class=\"number\">10</span>%);  <span class=\"comment\">/* returns a color 10% darker than @color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">saturate(@color, <span class=\"number\">10</span>%);   <span class=\"comment\">/* returns a color 10% more saturated than @color */</span></span><br><span class=\"line\">desaturate(@color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% less saturated than @color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">spin(@color, <span class=\"number\">10</span>);  <span class=\"comment\">/* returns a color with a 10 degree larger in hue than @color */</span></span><br><span class=\"line\">spin(@color, -<span class=\"number\">10</span>); <span class=\"comment\">/* returns a color with a 10 degree smaller hue than @color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mix(@color1, @color2); <span class=\"comment\">/* return a mix of @color1 and @color2 */</span></span><br></pre></td></tr></table></figure></li>\n<li>Stylus<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighten(color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% lighter than &#x27;color&#x27; */</span></span><br><span class=\"line\">darken(color, <span class=\"number\">10</span>%);  <span class=\"comment\">/* returns a color 10% darker than &#x27;color&#x27; */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">saturate(color, <span class=\"number\">10</span>%);   <span class=\"comment\">/* returns a color 10% more saturated than &#x27;color&#x27; */</span></span><br><span class=\"line\">desaturate(color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% less saturated than &#x27;color&#x27; */</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<ul>\n<li>可以直接在 CSS 预处理器中进行样式的计算<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  margin: (14px/<span class=\"number\">2</span>);</span><br><span class=\"line\">  top: 50px + 100px;</span><br><span class=\"line\">  right: 100px - 50px;</span><br><span class=\"line\">  left: <span class=\"number\">10</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "CSS"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/2023/08/30/1/",
            "url": "https://blog.mengcodes.com/Web/2023/08/30/1/",
            "title": "前端面试题",
            "date_published": "2023-08-30T14:57:40.000Z",
            "content_html": "<p><a id=\"more\"></a></p>\n<h1 id=\"css\"><a class=\"anchor\" href=\"#css\">#</a> CSS</h1>\n<h2 id=\"css的盒子模型\"><a class=\"anchor\" href=\"#css的盒子模型\">#</a> <span class=\"red\">css</span> 的盒子模型</h2>\n<div class=\"note info\">\n<ul>\n<li>在 HTML 页面中的所有元素都可以看成是一个盒子。盒子的组成：内容 content、内边距 padding、边框 border、外边距 margin</li>\n<li>盒模型的类型：<br />\n标准盒模型 margin + border + padding + content<br />\nIE 盒模型 margin + content (border + padding)</li>\n<li>控制盒模型的模式：box-sizing:content-box（默认值，标准盒模型）、border-box（IE 盒模型）;</li>\n</ul>\n</div>\n<h2 id=\"css选择器的优先级\"><a class=\"anchor\" href=\"#css选择器的优先级\">#</a> CSS 选择器的优先级</h2>\n<div class=\"note info\">\n<ul>\n<li>CSS 的特性：继承性、层叠性、优先级</li>\n<li>优先级：写 CSS 样式的时候，会给同一个元素添加多个样式，此时谁的权重高就显示谁的样式</li>\n<li>标签、类 / 伪类 / 属性、全局选择器、行内样式、id、!important</li>\n<li><ins class=\"dot\">!important &gt; 行内样式 &gt; id &gt; 类 / 伪类 / 属性 &gt; 标签 &gt; 全局选择器</ins></li>\n</ul>\n</div>\n<h2 id=\"隐藏元素的方法有哪些\"><a class=\"anchor\" href=\"#隐藏元素的方法有哪些\">#</a> 隐藏元素的方法有哪些？</h2>\n<div class=\"note info\">\n<ul>\n<li><span class=\"label primary\">display:none;</span> 元素在页面上消失，不占据空间</li>\n<li><span class=\"label primary\">opacity:0;</span> 设置了元素的透明度为 0，元素不可见，占据空间位置</li>\n<li><span class=\"label primary\">visibility:hidden;</span> 让元素消失，占据空间位置，一种不可见的状态</li>\n<li><span class=\"label primary\">position:absolute;</span></li>\n<li><span class=\"label primary\">clip-path</span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N3eXAxODgwOS9hcnRpY2xlL2RldGFpbHMvMTA1MDk3MjgyLw==\"> CSS3 Clip-Path </span></li>\n</ul>\n</div>\n<h2 id=\"px和rem的区别\"><a class=\"anchor\" href=\"#px和rem的区别\">#</a> px 和 rem 的区别</h2>\n<div class=\"note info\">\n<ul>\n<li>px 是像素，显示器上给我们呈现画面的像素，每个像素的大小是一样，绝对单位长度</li>\n<li>rem，相对单位，相对于 html 根节点的 font-size 的值，直接给 html 节点的 font-size:62.5%; 1rem = 10px; （16px*62.5%=10px）</li>\n</ul>\n</div>\n<h2 id=\"重绘重排有什么区别\"><a class=\"anchor\" href=\"#重绘重排有什么区别\">#</a> 重绘重排有什么区别？</h2>\n<div class=\"note info\">\n<ul>\n<li>重绘：计算好盒模型的位置、大小和其他一些属性之后，浏览器就会根据每个盒模型的特性进行绘制</li>\n<li>重排（回流）：布局引擎会根据所有的样式计算出盒模型在页面上的位置和大小</li>\n<li>浏览器的渲染机制<br />\n对 DOM 的样式进行修改，比如 color 和 background-color，浏览器不需要重新计算几何属性的时候，直接绘制了该元素的新样式，那么这里就只触发了重绘<br />\n对 DOM 的大小、位置进行修改后，浏览器需要重新计算元素的这些几何属性，就叫重排</li>\n</ul>\n</div>\n<h2 id=\"让一个元素水平垂直居中的方式有哪些\"><a class=\"anchor\" href=\"#让一个元素水平垂直居中的方式有哪些\">#</a> 让一个元素水平垂直居中的方式有哪些？</h2>\n<div class=\"note info\">\n<ul>\n<li>定位 + margin</li>\n<li>定位 + transform</li>\n<li>flex 布局</li>\n<li>grid 布局</li>\n<li>table 布局</li>\n</ul>\n</div>\n<h2 id=\"css的哪些属性哪些可以继承哪些不可以继承\"><a class=\"anchor\" href=\"#css的哪些属性哪些可以继承哪些不可以继承\">#</a> CSS 的哪些属性哪些可以继承？哪些不可以继承？</h2>\n<ul>\n<li>CSS 的三大特性：层叠、继承、优先级</li>\n</ul>\n<details class=\"primary\"><summary>展开</summary><div>\n<div class=\"note primary\">\n<ul>\n<li>（1）层叠性：相同选择器给设置相同的样式，此时一个样式就会覆盖另一个冲突样式。原则：样式冲突 - 遵循的原则是就近原则，哪个样式理结构近，就执行哪个样式</li>\n<li>（2）继承性：子标签会继承父标签的某些样式，如文本颜色，字号</li>\n<li>（3）优先级：给同一个元素指定多个选择器，就会产生优先级</li>\n</ul>\n</div>\n</div></details>\n<div class=\"note info\">\n<ul>\n<li>字体的一些属性：font</li>\n<li>文本的一些属性：line-height</li>\n<li>元素的可见性：visibility:hidden</li>\n<li>表格布局的属性：border-spacing</li>\n<li>列表的属性：list-style</li>\n<li>页面样式属性：page</li>\n<li>声音的样式属性</li>\n</ul>\n</div>\n<h2 id=\"有没有用过预处理器\"><a class=\"anchor\" href=\"#有没有用过预处理器\">#</a> 有没有用过预处理器？</h2>\n<ul>\n<li>预处理语言增加了变量、嵌套、运算、混入 (Mixin)、继承、颜色处理、函数等特性。常用的有 sass less stylus</li>\n<li>区别请移步 <a href=\"https://blog.mengcodes.com/Web/Css/2023/09/04/1//\">Css 预处理语言 Sass、Less、Stylus 区别</a></li>\n</ul>\n<h1 id=\"javasscipt\"><a class=\"anchor\" href=\"#javasscipt\">#</a> JavaSscipt</h1>\n<h2 id=\"js由哪三部分组成\"><a class=\"anchor\" href=\"#js由哪三部分组成\">#</a> JS 由哪三部分组成</h2>\n<div class=\"note info\">\n<ul>\n<li>ECMAScript：JS 的核心内容，描述了语言的基础语法，比如 var,for，数据类型（数组、字符串），</li>\n<li>文档对象模型（DOM）：DOM 把整个 HTML 页面规划为元素构成的文档</li>\n<li>浏览器对象模型（BOM）：对浏览器窗口进行访问和操作</li>\n</ul>\n</div>\n<h2 id=\"js有哪些内置对象\"><a class=\"anchor\" href=\"#js有哪些内置对象\">#</a> JS 有哪些内置对象？</h2>\n<div class=\"note info\">\n<p>String Boolean Number Array Object Function Math Date RegExp...<br />\nMath<br />\nabs() sqrt() max() min()<br />\nDate<br />\nnew Date() getYear()<br />\nArray<br />\nconcat() length  slice() split()<br />\nString</p>\n</div>\n<h2 id=\"操作数组的方法有哪些\"><a class=\"anchor\" href=\"#操作数组的方法有哪些\">#</a> 操作数组的方法有哪些？</h2>\n<div class=\"note info\">\n<p>push() pop() sort() splice() unshift() shift() reverse() concat() join() map() filter()<br />\nervery() some() reduce() isArray() findIndex()</p>\n</div>\n<ul>\n<li>哪些方法会改变原数组？</li>\n</ul>\n<div class=\"note info\">\n<p>push() pop() unshift() shift() sort() reverse() splice()</p>\n</div>\n<h2 id=\"js数据类型及转换\"><a class=\"anchor\" href=\"#js数据类型及转换\">#</a> JS 数据类型及转换</h2>\n<div class=\"note info\">\n<ul>\n<li>基本类型： Number、String、Boolean、null、undefined、Symbol、Bigint</li>\n<li>引用类型：Object: Array – 数组对象、RegExp – 正则对象、Date – 日期对象、Math – 数学函数、Function – 函数对象等常见类型</li>\n<li>其中基础数据类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量。引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址。假如声明两个引用类型同时指向了一个地址的时候，修改其中一个那么另外一个也会改变。</li>\n</ul>\n</div>\n<ul>\n<li>数据类型转换<br />\n强制类型转换: Number ()、parseInt ()、parseFloat ()、Boolean () 等</li>\n</ul>\n<div class=\"note info\">\n<ul>\n<li>Number () 方法的强制转换规则：<br />\n如果是布尔值，true 和 false 分别被转换为 1 和 0。<br />\n如果是数字，返回自身。<br />\n如果是 null，返回 0。<br />\n如果是 undefined，返回 NaN。<br />\n如果是字符串，遵循以下规则：如果字符串中只包含数字（或者是 0X / 0x 开头的十六进制数字字符串，允许包含正负号），则将其转换为十进制；如果字符串中包含有效的浮点格式，将其转换为浮点数值；如果是空字符串，将其转换为 0；如果不是以上格式的字符串，均返回 NaN。<br />\n如果是 Symbol，抛出错误。<br />\n如果是对象，并且部署了 [Symbol.toPrimitive] ，那么调用此方法，否则调用对象的 valueOf () 方法，然后依据前面的规则转换返回的值；如果转换的结果是 NaN ，则调用对象的 toString () 方法，再次依照前面的顺序转换返回对应的值。</li>\n<li>parseInt () 方法的强制转换规则：<br />\n这个方法的规则是：除了字符串参数的第一个字符为数字返回的结果为数字外，其他都是 NAN。</li>\n<li>parseFloat()<br />\n 这个方法的规则和 parseInt 类似，如果给定值能被解析成浮点数，则返回浮点数。如果给定值不能被转换成数值，则会返回 NAN。</li>\n<li>Boolean () 方法的强制转换规则：<br />\n这个方法的规则是：除了 undefined、 null、 false、 ”、 0（包括 +0，-0）、 NaN 转换出来是 false，其他都是 true。</li>\n</ul>\n</div>\n<ul>\n<li>隐式类型转换:</li>\n</ul>\n<div class=\"note info\">\n<p>凡是通过逻辑运算符 (&amp;&amp;、 ||、 !)、运算符 (+、-、*、/)、关系操作符 (&gt;、 &lt;、 &lt;= 、&gt;=)、相等运算符 (==) 或者 if/while 条件的操作，如果遇到两个数据类型不一样的情况，都会出现隐式类型转换。</p>\n</div>\n<h2 id=\"js对数据类的检测方式有哪些\"><a class=\"anchor\" href=\"#js对数据类的检测方式有哪些\">#</a> JS 对数据类的检测方式有哪些？</h2>\n<div class=\"note info\">\n<p>typeof()<br />\ninstanceof()<br />\nconstructor<br />\nObject.prototype.toString.call()</p>\n</div>\n<ul>\n<li>区别请移步 <a href=\"https://blog.mengcodes.com/Web/Js/2023/09/04/2/\">Js 检测数据类型的方法和区别</a></li>\n</ul>\n<h2 id=\"闭包及特点\"><a class=\"anchor\" href=\"#闭包及特点\">#</a> 闭包及特点</h2>\n<div class=\"note info\">\n<p>什么是闭包？函数嵌套函数，内部函数被外部函数返回并保存下来时，就会产生闭包<br />\n特点：可以重复利用变量，并且这个变量不会污染全局的一种机制；这个变量是一直保存在内存中，不会被垃圾回收机制回收<br />\n缺点：闭包较多的时候，会消耗内存，导致页面的性能下降，在 IE 浏览器中才会导致内存泄漏<br />\n使用场景：防抖，节流，函数嵌套函数避免全局污染，自执行的时候</p>\n</div>\n<h2 id=\"前端的内存泄漏怎么理解\"><a class=\"anchor\" href=\"#前端的内存泄漏怎么理解\">#</a> 前端的内存泄漏怎么理解？</h2>\n<div class=\"note info\">\n<p>JS 里已经分配内存地址的对象，但是由于长时间没有释放或者没办法清除，造成长期占用内存的现象，会让内存资源大幅浪费，最终导致运行速度慢，甚至崩溃的情况。<br />\n垃圾回收机制<br />\n因素：一些为生命直接赋值的变量；一些未清空的定时器；过度的闭包；一些引用元素没有被清除。</p>\n</div>\n<h2 id=\"事件委托是什么\"><a class=\"anchor\" href=\"#事件委托是什么\">#</a> 事件委托是什么？</h2>\n<ul>\n<li>又叫事件代理，原理就是利用了事件冒泡的机制来实现，也就是说把子元素的事件绑定到了父元素的身上</li>\n</ul>\n<div class=\"note info\">\n<p>如果子元素阻止了事件冒泡，那么委托也就不成立，阻止事件冒泡：event.stopPropagation ()<br />\n 方式：addEventListener ('click', 函数名，true/false) 默认是 false（事件冒泡），true（事件捕获）<br />\n好处：提高性能，减少事件的绑定，也就减少了内存的占用。</p>\n</div>\n<h2 id=\"说一下原型链\"><a class=\"anchor\" href=\"#说一下原型链\">#</a> 说一下原型链。</h2>\n<p>原型就是一个普通对象，它是为构造函数的实例共享属性和方法；所有实例中引用的原型都是同一个对象<br />\n使用 prototype 可以把方法挂在原型上，内存值保存一份<br />\n__proto__可以理解为指针，实例对象中的属性，指向了构造函数的原型（prototype）<br />\n10.new 操作符具体做了什么？<br />\n1. 先创建一个空对象<br />\n 2. 把空对象和构造函数通过原型链进行链接<br />\n 3. 把构造函数的 this 绑定到新的空对象身上<br />\n 4. 根据构建函数返回的类型判断，如果是值类型，则返回对象，如果是引用类型，就要返回这个引用类型<br />\n 11.JS 是如何实现继承的？<br />\n1. 原型链继承<br />\n 2. 借用构造函数继承<br />\n 3. 组合式继承<br />\n 4.ES6 的 class 类继承<br />\n 12.JS 的设计原理是什么？<br />\nJS 引擎 运行上下文 调用栈 事件循环 回调<br />\n 13.JS 中关于 this 指向的问题<br />\n 1. 全局对象中的 this 指向<br />\n指向的是 window<br />\n2. 全局作用域或者普通函数中的 this<br />\n 指向全局 window<br />\n3. this 永远指向最后调用它的那个对象<br />\n在不是箭头函数的情况下<br />\n 4. new 关键词改变了 this 的指向<br />\n 5. apply,call,bind<br />\n 可以改变 this 指向，不是箭头函数<br />\n 6. 箭头函数中的 this<br />\n 它的指向在定义的时候就已经确定了<br />\n箭头函数它没有 this, 看外层是否有函数，有就是外层函数的 this，没有就是 window<br />\n7. 匿名函数中的 this<br />\n 永远指向了 window, 匿名函数的执行环境具有全局性，因此 this 指向 window<br />\n14.script 标签里的 async 和 defer 有什么区别？<br />\n当没有 async 和 defer 这两个属性的时候，<br />\n浏览器会立刻加载并执行指定的脚本<br />\n有 async<br />\n 加载和渲染后面元素的过程将和 script 的加载和执行并行进行（异步）<br />\n有 defer<br />\n 加载和渲染后面元素的过程将和 script 的加载并行进行（异步），但是它的执行事件要等<br />\n所有元素解析完成之后才会执行<br />\n 15.setTimeout 最小执行时间是多少？<br />\nHTML5 规定的内容：<br />\nsetTimeout 最小执行时间是 4ms<br />\nsetInterval 最小执行时间是 10ms<br />\n16.ES6 和 ES5 有什么区别？<br />\nJS 的组成：ECMAScript BOM  DOM<br />\nES5:ECMAScript5,2009 年 ECMAScript 的第五次修订，ECMAScript2009<br />\nES6:ECMAScript6,2015 年 ECMAScript 的第六次修订，ECMAScript2015，是 JS 的下一个版本标准<br />\n 17.ES6 的新特性有哪些？<br />\n1. 新增块级作用域（let,const）<br />\n不存在变量提升<br />\n存在暂时性死区的问题<br />\n块级作用域的内容<br />\n不能在同一个作用域内重复声明<br />\n 2. 新增了定义类的语法糖（class）<br />\n3. 新增了一种基本数据类型（symbol）<br />\n4. 新增了解构赋值<br />\n从数组或者对象中取值，然后给变量赋值<br />\n 5. 新增了函数参数的默认值<br />\n 6. 给数组新增了 API<br />\n7. 对象和数组新增了扩展运算符<br />\n 8.Promise<br />\n 解决回调地狱的问题。<br />\n自身有 all,reject,resolve,race 方法<br />\n原型上有 then,catch<br />\n 把异步操作队列化<br />\n三种状态：pending 初始状态，fulfilled 操作成功，rejected 操作失败<br />\n状态：pending -&gt; fulfilled;pending -&gt; rejected 一旦发生，状态就会凝固，不会再变<br />\n async  await<br />\n 同步代码做异步的操作，两者必须搭配使用<br />\n async 表明函数内有异步操作，调用函数会返回 promise<br />\nawait 是组成 async 的表达式，结果是取决于它等待的内容，如果是 promise 那就是 promise 的结果，如果是普通函数就进行链式调用<br />\n await 后的 promise 如果是 reject 状态，那么整个 async 函数都会中断，后面的代码不执行</p>\n<pre><code>    9.新增了模块化（import,export）\n    10.新增了set和map数据结构\n        set就是不重复\n        map的key的类型不受限制\n    11.新增了generator\n    12.新增了箭头函数\n        不能作为构造函数使用，不能用new\n        箭头函数就没有原型\n        箭头函数没有arguments\n        箭头函数不能用call,apply,bind去改变this的执行\n        this指向外层第一个函数的this\n18.call,aply,bind三者有什么区别？\n    都是改变this指向和函数的调用，call和apply的功能类似，只是传参的方法不同\n    call方法传的是一个参数列表\n    apply传递的是一个数组\n    bind传参后不会立刻执行，会返回一个改变了this指向的函数，这个函数还是可以传参的，bind()()\n    call方法的性能要比apply好一些，所以call用的更多一点\n19.用递归的时候有没有遇到什么问题？\n    如果一个函数内可以调用函数本身，那么这个就是递归函数\n    函数内部调用自己\n    特别注意：写递归必须要有退出条件return\n20.如何实现一个深拷贝？\n    深拷贝就是完全拷贝一份新的对象，会在堆内存中开辟新的空间，拷贝的对象被修改后，原对象不受影响\n    主要针对的是引用数据类型\n    1.扩展运算符\n    2.JSON.parse(JSON.stringify())\n    3.利用递归函数实现\n21.说一下事件循环。\n    JS是一个单线程的脚本语言\n    主线程 执行栈 任务队列  宏任务 微任务\n    主线程先执行同步任务，然后才去执行任务队列里的任务，如果在执行宏任务之前有微任务，那么要先执行微任务\n    全部执行完之后等待主线程的调用，调用完之后再去任务队列中查看是否有异步任务，这样一个循环往复的过程就是事件循环！\n22.ajax是什么？怎么实现的？\n    创建交互式网页应用的网页开发技术\n        在不重新加载整个网页的前提下，与服务器交换数据并更新部分内容\n    通过XmlHttpRequest对象向服务器发送异步请求，然后从服务器拿到数据，最后通过JS操作DOM更新页面\n    1.创建XmlHttpRequest对象 xmh\n    2.通过xmh对象里的open()方法和服务器建立连接\n    3.构建请求所需的数据，并通过xmh对象的send()发送给服务器\n    4.通过xmh对象的onreadystate chansge事件监听服务器和你的通信状态\n    5.接收并处理服务器响应的数据结果\n    6.把处理的数据更新到HTML页面上\n23.get和post有什么区别？\n    1.get一般是获取数据，post一般是提交数据\n    2.get参数会放在url上，所以安全性比较差，post是放在body中\n    3.get请求刷新服务器或退回是没有影响的，post请求退回时会重新提交数据\n    4.get请求时会被缓存,post请求不会被缓存\n    5.get请求会被保存在浏览器历史记录中,post不会\n    6.get请求只能进行url编码，post请求支持很多种\n24.promise的内部原理是什么？它的优缺点是什么？\n    Promise对象，封装了一个异步操作并且还可以获取成功或失败的结果\n    Promise主要就是解决回调地狱的问题，之前如果异步任务比较多，同时他们之间有相互依赖的关系，\n    就只能使用回调函数处理，这样就容易形成回调地狱，代码的可读性差，可维护性也很差\n    有三种状态：pending初始状态  fulfilled成功状态  rejected失败状态\n    状态改变只会有两种情况，\n        pending -&gt; fulfilled; pending -&gt; rejected 一旦发生，状态就会凝固，不会再变\n    首先就是我们无法取消promise，一旦创建它就会立即执行，不能中途取消\n    如果不设置回调，promise内部抛出的测u哦呜就无法反馈到外面\n    若当前处于pending状态时，无法得知目前在哪个阶段。\n    原理：\n        构造一个Promise实例，实例需要传递函数的参数，这个函数有两个形参，分别都是函数类型，一个是resolve一个是reject\n        promise上还有then方法，这个方法就是来指定状态改变时的确定操作，resolve是执行第一个函数，reject是执行第二个函数\n25.promise和async await的区别是什么？\n    1.都是处理异步请求的方式\n    2.promise是ES6，async await 是ES7的语法\n    3.async await是基于promise实现的，他和promise都是非阻塞性的\n    优缺点：\n    1.promise是返回对象我们要用then，catch方法去处理和捕获异常，并且书写方式是链式，容易造成代码重叠，不好维护，async await 是通过tra catch进行捕获异常\n    2.async await最大的优点就是能让代码看起来像同步一样，只要遇到await就会立刻返回结果，然后再执行后面的操作\n    promise.then()的方式返回，会出现请求还没返回，就执行了后面的操作\n26.浏览器的存储方式有哪些？\n    1.cookies\n        H5标准前的本地存储方式\n        兼容性好，请求头自带cookie\n        存储量小，资源浪费，使用麻烦（封装）\n    2.localstorage\n        H5加入的以键值对为标准的方式\n        操作方便，永久存储，兼容性较好\n        保存值的类型被限定，浏览器在隐私模式下不可读取，不能被爬虫\n    3.sessionstorage\n        当前页面关闭后就会立刻清理，会话级别的存储方式\n    4.indexedDB\n        H5标准的存储方式，，他是以键值对进行存储，可以快速读取，适合WEB场景\n27.token存在sessionstorage还是loaclstorage？\n    token：验证身份的令牌，一般就是用户通过账号密码登录后，服务端把这些凭证通过加密等一系列操作后得到的字符串\n    1.存loaclstorage里，后期每次请求接口都需要把它当作一个字段传给后台\n    2.存cookie中，会自动发送，缺点就是不能跨域\n    如果存在localstorage中，容易被XSS攻击，但是如果做好了对应的措施，那么是利大于弊\n    如果存在cookie中会有CSRF攻击\n28.token的登录流程。\n    1.客户端用账号密码请求登录\n    2.服务端收到请求后，需要去验证账号密码\n    3.验证成功之后，服务端会签发一个token，把这个token发送给客户端\n    4.客户端收到token后保存起来，可以放在cookie也可以是localstorage\n    5.客户端每次向服务端发送请求资源的时候，都需要携带这个token\n    6.服务端收到请求，接着去验证客户端里的token，验证成功才会返回客户端请求的数据\n29.页面渲染的过程是怎样的？\n    DNS解析\n    建立TCP连接\n    发送HTTP请求\n    服务器处理请求\n    渲染页面\n        浏览器会获取HTML和CSS的资源，然后把HTML解析成DOM树\n        再把CSS解析成CSSOM\n        把DOM和CSSOM合并为渲染树\n        布局\n        把渲染树的每个节点渲染到屏幕上（绘制）\n    断开TCP连接\n30.DOM树和渲染树有什么区别？\n    DOM树是和HTML标签一一对应的，包括head和隐藏元素\n    渲染树是不包含head和隐藏元素\n31.精灵图和base64的区别是什么？\n    精灵图：把多张小图整合到一张大图上，利用定位的一些属性把小图显示在页面上，当访问页面可以减少请求，提高加载速度\n    base64：传输8Bit字节代码的编码方式，把原本二进制形式转为64个字符的单位，最后组成字符串\n    base64是会和html css一起下载到浏览器中，减少请求，减少跨域问题，但是一些低版本不支持，若base64体积比原图片大，不利于css的加载。\n32.svg格式了解多少？\n    基于XML语法格式的图像格式，可缩放矢量图，其他图像是基于像素的，SVG是属于对图像形状的描述，本质是文本文件，体积小，并且不管放大多少倍都不会失真\n    1.SVG可直接插入页面中，成为DOM一部分，然后用JS或CSS进行操作\n        &lt;svg&gt;&lt;/svg&gt;\n    2.SVG可作为文件被引入\n        &lt;img src=&quot;pic.svg&quot; /&gt;\n    3.SVG可以转为base64引入页面\n33.了解过JWT吗？\n    JSON Web Token 通过JSON形式作为在web应用中的令牌，可以在各方之间安全的把信息作为JSON对象传输\n    信息传输、授权\n    JWT的认证流程\n    1.前端把账号密码发送给后端的接口\n    2.后端核对账号密码成功后，把用户id等其他信息作为JWT 负载，把它和头部分别进行base64编码拼接后签名，形成一个JWT（token）。\n    3.前端每日请求时都会把JWT放在HTTP请求头的Authorization字段内\n    4.后端检查是否存在，如果存在就验证JWT的有效性（签名是否正确，token是否过期）\n    5.验证通过后后端使用JWT中包含的用户信息进行其他的操作，并返回对应结果\n    简洁、包含性、因为Token是JSON加密的形式保存在客户端，所以JWT是跨语言的，原则上是任何web形式都支持。\n34.npm的底层环境是什么？\n    node package manager,node的包管理和分发工具，已经成为分发node模块的标准，是JS的运行环境\n    npm的组成：网站、注册表、命令行工具\n35.HTTP协议规定的协议头和请求头有什么？\n    1.请求头信息：\n        Accept:浏览器告诉服务器所支持的数据类型\n        Host:浏览器告诉服务器我想访问服务器的哪台主机\n        Referer:浏览器告诉服务器我是从哪里来的（防盗链）\n        User-Agent:浏览器类型、版本信息\n        Date:浏览器告诉服务器我是什么时候访问的\n        Connection:连接方式\n        Cookie\n        X-Request-With:请求方式\n    2.响应头信息：\n        Location:这个就是告诉浏览器你要去找谁\n        Server:告诉浏览器服务器的类型\n        Content-Type:告诉浏览器返回的数据类型\n        Refresh:控制了的定时刷新\n36.说一下浏览器的缓存策略。\n    强缓存（本地缓存）、协商缓存（弱缓存）\n    强缓：不发起请求，直接使用缓存里的内容，浏览器把JS，CSS，image等存到内存中，下次用户访问直接从内存中取，提高性能\n    协缓：需要像后台发请求，通过判断来决定是否使用协商缓存，如果请求内容没有变化，则返回304，浏览器就用缓存里的内容\n    强缓存的触发：\n        HTTP1.0:时间戳响应标头\n        HTTP1.1:Cache-Control响应标头\n    协商缓存触发：\n        HTTP1.0:请求头：if-modified-since 响应头：last-modified\n        HTTP1.1:请求头：if-none-match 响应头：Etag\n37.说一下什么是“同源策略”？\n    http:// www.  aaa.com:8080/index/vue.js\n    协议    子域名 主域名  端口号     资源\n    同源策略是浏览器的核心，如果没有这个策略就会遭受网络攻击\n    主要指的就是协议+域名+端口号三者一致，若其中一个不一样则不是同源，会产生跨域\n    三个允许跨域加载资源的标签：img  link  script\n    跨域是可以发送请求，后端也会正常返回结果，只不过这个结果被浏览器拦截了！\n    JSONP\n    CORS\n    websocket\n    反向代理\n38.防抖和节流是什么？\n    都是应对页面中频繁触发事件的优化方案\n    防抖:避免事件重复触发\n    使用场景:1.频繁和服务端交互 2.输入框的自动保存事件\n    节流:把频繁触发的事件减少,每隔一段时间执行\n    使用场景:scroll事件\n39.解释一下什么是json？\n    JSON是一种纯字符串形式的数据，它本身不提供任何方法，适合在网络中进行传输\n    JSON数据存储在.json文件中，也可以把JSON数据以字符串的形式保存在数据库、Cookise中\n    JS提供了JSON.parse() JSON.stringify()\n    什么时候使用json：定义接口；序列化；生成token；配置文件package.json\n40.当数据没有请求过来的时候，该怎么做？\n    可以在渲染数据的地方给一些默认的值\n    if判断语句\n41.有没有做过无感登录？\n    1.在相应其中拦截，判断token返回过期后，调用刷新token的接口\n    2.后端返回过期时间，前端判断token的过期时间，去调用刷新token的接口\n    3.写定时器，定时刷新token接口\n    流程：\n        1.登录成功后保存token 和 refresh_token\n        2.在响应拦截器中对401状态码引入刷新token的api方法调用\n        3.替换保存本地新的token\n        4.把错误对象里的token替换\n        5.再次发送未完成的请求\n        6.如果refresh_token过期了，判断是否过期，过期了就清楚所有token重新登录\n42.大文件上传是怎么做的？\n    分片上传：\n        1.把需要上传的文件按照一定的规则，分割成相同大小的数据块\n        2.初始化一个分片上传任务，返回本次分片上传的唯一标识\n        3.按照一定的规则把各个数据块上传\n        4.发送完成后，服务端会判断数据上传的完整性，如果完整，那么就会把数据库合并成原始文件\n    断点续传：\n        服务端返回，从哪里开始  浏览器自己处理\n</code></pre>\n<p>三、HTML5CSS3<br />\n1. 语义化的理解。<br />\n在写 HTML 页面结构时所用的标签有意义<br />\n头部用 head  主体用 main  底部用 foot...<br />\n 怎么判断页面是否语义化了？<br />\n把 CSS 去掉，如果能够清晰的看出来页面结构，显示内容较为正常<br />\n为什么要选择语义化？<br />\n1. 让 HTML 结构更加清晰明了<br />\n 2. 方便团队协作，利于开发<br />\n 3. 有利于爬虫和 SEO<br />\n4. 能够让浏览器更好的去解析代码<br />\n 5. 给用户带来良好的体验<br />\n 2.H5C3 有哪些新特性？<br />\nH5 的新特性：<br />\n1. 语义化的标签<br />\n 2. 新增音频视频<br />\n 3. 画布 canvas<br />\n4. 数据存储 localstorage sessionstorage<br />\n5. 增加了表单控件 email url search...<br />\n6. 拖拽释放 API<br />\nCSS3 的新特性：<br />\n1. 新增选择器：属性选择器、伪类选择器、伪元素选择器<br />\n 2. 增加了媒体查询<br />\n 3. 文字阴影<br />\n 4. 边框<br />\n 5. 盒子模型 box-sizing<br />\n6. 渐变<br />\n 7. 过度<br />\n 8. 自定义动画<br />\n 9. 背景的属性<br />\n 10.2D 和 3D<br />\n3.rem 是如何做适配的？<br />\nrem 是相对长度，相对于根元素（html）的 font-size 属性来计算大小，通常来做移动端的适配<br />\n rem 是根据根元素 font-size 计算值的倍数<br />\n比如 html 上的 font-size:16px，给 div 设置宽为 1.5rem,1.2rem = 16px*1.2 = 19.2px.<br />\n4. 解决了哪些移动端的兼容问题？<br />\n1. 当设置样式 overflow:scroll/auto 时，IOS 上的华东会卡顿<br />\n - webkit-overflow-scrolling:touch;<br />\n2. 在安卓环境下 placeholder 文字设置行高时会偏上<br />\n input 有 placeholder 属性的时候不要设置行高<br />\n 3. 移动端字体小于 12px 时异常显示<br />\n应该先把在整体放大一倍，然后再用 transform 进行缩小<br />\n 4.ios 下 input 按钮设置了 disabled 属性为 true 显示异常<br />\n input<span>typy=button</span>{<br />\nopcity:1<br />\n}<br />\n 5. 安卓手机下取消语音输入按钮<br />\n input::-webkit-input-speech-button {<br />\ndisplay:none<br />\n}<br />\n 6.IOS 下取消 input 输入框在输入引文首字母默认大写<br />\n &lt;input autocapitalize='off' autocorrect='off'/&gt;<br />\n7. 禁用 IOS 和安卓用户选中文字<br />\n添加全局 CSS 样式：-webkit-user-select:none<br />\n8. 禁止 IOS 弹出各种窗口<br />\n - webkit-touch-callout:none<br />\n9. 禁止 IOS 识别长串数字为电话<br />\n添加 meta 属性 &lt;meta conten='telephone=no' name='format-detection'&gt;</p>\n<p>四、Vue<br />\n1.v-if 和 v-show 的区别？<br />\n都可以控制元素的显示和隐藏<br />\n 1.v-show 时控制元素的 display 值来让元素显示和隐藏；v-if 显示隐藏时把 DOM 元素整个添加和删除<br />\n 2.v-if 有一个局部编译 / 卸载的过程，切换这个过程中会适当的销毁和重建内部的事件监听和子组件；v-show 只是简单的 css 切换<br />\n 3.v-if 才是真正的条件渲染；v-show 从 false 变成 true 的时候不会触发组件的声明周期，v-if 会触发声明周期<br />\n 4.v-if 的切换效率比较低  v-show 的效率比较高<br />\n 2. 如何理解 MVVM 的？<br />\n是 Model-View-ViewModel 的缩写。前端开发的架构模式<br />\n M：模型，对应的就是 data 的数据<br />\n V：视图，用户界面，DOM<br />\nVM：视图模型：Vue 的实例对象，连接 View 和 Model 的桥梁<br />\n核心是提供对 View 和 ViewModel 的双向数据绑定，当数据改变的时候，ViewModel 能监听到数据的变化，自动更新视图，当用户操作视图的时候，ViewModel 也可以监听到视图的变化，然后通知数据进行改动，这就实现了双向数据绑定<br />\n ViewModel 通过双向绑定把 View 和 Model 连接起来，他们之间的同步是自动的，不需要认为干涉，所以我们只需要关注业务逻辑即可，不需要操作 DOM，同时也不需要关注数据的状态问题，因为她是由 MVVM 统一管理<br />\n 3.v-for 中的 key 值的作用是什么？<br />\nkey 属性是 DOM 元素的唯一标识<br />\n作用：<br />\n1. 提高虚拟 DOM 的更新<br />\n 2. 若不设置 key，可能会触发一些 bug<br />\n3. 为了触发过度效果<br />\n 4. 说一下你对 vue 生命周期的理解。<br />\n组件从创建到销毁的过程就是它的生命周期<br />\n创建<br />\n beforeCreat<br />\n 在这个阶段属性和方法都不能使用<br />\n created<br />\n 这里时实例创建完成之后，在这里完成了数据监测，可以使用数据，修改数据，不会触发 updated，也不会更新视图<br />\n挂载<br />\n beforeMount<br />\n 完成了模板的编译，虚拟 DOM 也完成创建，即将渲染，修改数据，不会触发 updated<br />\nMounted<br />\n 把编译好的模板挂载到页面，这里可以发送异步请求也可以访问 DOM 节点<br />\n更新<br />\n beforeUpdate<br />\n 组件数据更新之前使用，数据是新的，页面上的数据时旧的，组件即将更新，准备渲染，可以改数据<br />\n updated<br />\nrender 重新做了渲染，这时数据和页面都是新的，避免在此更新数据<br />\n销毁<br />\n beforeDestroy<br />\n 实例销毁前，在这里实例还可以用，可以清楚定时器等等<br />\n destroyed<br />\n 组件已经被销毁了，全部都销毁<br />\n使用了 keep-alive 时多出两个周期：<br />\nactivited<br />\n 组件激活时<br />\n deactivited<br />\n 组件被销毁时<br />\n 5. 在 created 和 mounted 去请求数据，有什么区别？<br />\ncreated：在渲染前调用，通常先初始化属性，然后做渲染<br />\n mounted：在模板渲染完成后，一般都是初始化页面后，在对元素节点进行操作<br />\n在这里请求数据可能会出现闪屏的问题，created 里不会<br />\n一般用 created 比较多<br />\n请求的数据对 DOM 有影响，那么使用 created<br />\n 如果请求的数据对 DOM 无关，可以放在 mounted<br />\n6.vue 中的修饰符有哪些？<br />\n1. 事件修饰符<br />\n.stop       组织冒泡<br />\n.prevent    组织默认行为<br />\n.capture    内部元素触发的事件先在次处理<br />\n.self       只有在 event.target 是当前元素时触发<br />\n.once       事件只会触发一次<br />\n.passive    立即触发默认行为<br />\n.native     把当前元素作为原生标签看待<br />\n 2. 按键修饰符<br />\n.keyup      键盘抬起<br />\n.keydown    键盘按下<br />\n 3. 系统修饰符<br />\n.ctrl<br />\n.alt<br />\n.meta<br />\n4. 鼠标修饰符<br />\n.left       鼠标左键<br />\n.right      鼠标右键<br />\n.middle     鼠标中键<br />\n 5. 表单修饰符<br />\n.lazy       等输入完之后再显示<br />\n.trim       删除内容前后的空格<br />\n.number     输入是数字或转为数字<br />\n 7.elementui 是怎么做表单验证的？<br />\n1. 在表单中加 rules 属性，然后再 data 里写校验规则<br />\n 2. 内部添加规则<br />\n 3. 自定义函数校验<br />\n 8.vue 如何进行组件通信？<br />\n1. 父传子<br />\n props<br />\n 父组件使用自定义属性，然后子组件使用 props<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mtext>引用信息会注册在父组件的</mtext></mrow><annotation encoding=\"application/x-tex\">ref\n                引用信息会注册在父组件的</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord cjk_fallback\">引</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">息</span><span class=\"mord cjk_fallback\">会</span><span class=\"mord cjk_fallback\">注</span><span class=\"mord cjk_fallback\">册</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord cjk_fallback\">父</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">的</span></span></span></span> refs 对象上<br />\n 2. 子传父<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mtext>子组件绑定自定义事件，触发执行后，传给父组件，父组件需要用事件监听来接收参数</mtext><mn>3.</mn><mtext>兄弟传</mtext><mi>n</mi><mi>e</mi><mi>w</mi><mtext>一个新的</mtext><mi>v</mi><mi>u</mi><mi>e</mi><mtext>实例，用</mtext><mi>o</mi><mi>n</mi><mtext>和</mtext><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mtext>来对数据进行传输</mtext><mn>4.</mn><mi>v</mi><mi>u</mi><mi>e</mi><mi>x</mi><mtext>传值</mtext><mn>9.</mn><mi>k</mi><mi>e</mi><mi>e</mi><mi>p</mi><mo>−</mo><mi>a</mi><mi>l</mi><mi>i</mi><mi>v</mi><mi>e</mi><mtext>是什么？怎么使用？</mtext><mi>V</mi><mi>u</mi><mi>e</mi><mtext>的一个内置组件，包裹组件的时候，会缓存不活跃的组件实例，并不是销毁他们作用：把组件切换的状态保存在内存里，防止重复渲染</mtext><mi>D</mi><mi>O</mi><mi>M</mi><mtext>节点，减少加载时间和性能消耗，提高用户体验</mtext><mn>10.</mn><mi>a</mi><mi>x</mi><mi>i</mi><mi>o</mi><mi>s</mi><mtext>是怎么做封装的？下载创建实例接着封装请求响应拦截器抛出最后封装接口</mtext><mn>11.</mn><mi>v</mi><mi>u</mi><mi>e</mi><mtext>路由时怎么传参的？</mtext><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>s</mi><mtext>传参</mtext><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">emit\n                子组件绑定自定义事件，触发执行后，传给父组件，父组件需要用事件监听来接收参数\n        3.兄弟传\n            new一个新的vue实例，用on和emit来对数据进行传输\n        4.vuex传值\n    9.keep-alive是什么？怎么使用？\n        Vue的一个内置组件，包裹组件的时候，会缓存不活跃的组件实例，并不是销毁他们\n        作用：把组件切换的状态保存在内存里，防止重复渲染DOM节点，减少加载时间和性能消耗，提高用户体验\n    10.axios是怎么做封装的？\n        下载 创建实例 接着封装请求响应拦截器  抛出 最后封装接口\n    11.vue路由时怎么传参的？\n        params传参\n            this.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">子</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">绑</span><span class=\"mord cjk_fallback\">定</span><span class=\"mord cjk_fallback\">自</span><span class=\"mord cjk_fallback\">定</span><span class=\"mord cjk_fallback\">义</span><span class=\"mord cjk_fallback\">事</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">触</span><span class=\"mord cjk_fallback\">发</span><span class=\"mord cjk_fallback\">执</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">给</span><span class=\"mord cjk_fallback\">父</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">父</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">需</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">事</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">监</span><span class=\"mord cjk_fallback\">听</span><span class=\"mord cjk_fallback\">来</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">收</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord cjk_fallback\">兄</span><span class=\"mord cjk_fallback\">弟</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">新</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">实</span><span class=\"mord cjk_fallback\">例</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">来</span><span class=\"mord cjk_fallback\">对</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord\">9</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">什</span><span class=\"mord cjk_fallback\">么</span><span class=\"mord cjk_fallback\">？</span><span class=\"mord cjk_fallback\">怎</span><span class=\"mord cjk_fallback\">么</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">？</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">内</span><span class=\"mord cjk_fallback\">置</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">包</span><span class=\"mord cjk_fallback\">裹</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">候</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">会</span><span class=\"mord cjk_fallback\">缓</span><span class=\"mord cjk_fallback\">存</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">活</span><span class=\"mord cjk_fallback\">跃</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">实</span><span class=\"mord cjk_fallback\">例</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">并</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">销</span><span class=\"mord cjk_fallback\">毁</span><span class=\"mord cjk_fallback\">他</span><span class=\"mord cjk_fallback\">们</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">把</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">切</span><span class=\"mord cjk_fallback\">换</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">状</span><span class=\"mord cjk_fallback\">态</span><span class=\"mord cjk_fallback\">保</span><span class=\"mord cjk_fallback\">存</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord cjk_fallback\">内</span><span class=\"mord cjk_fallback\">存</span><span class=\"mord cjk_fallback\">里</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">防</span><span class=\"mord cjk_fallback\">止</span><span class=\"mord cjk_fallback\">重</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">渲</span><span class=\"mord cjk_fallback\">染</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord cjk_fallback\">节</span><span class=\"mord cjk_fallback\">点</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">减</span><span class=\"mord cjk_fallback\">少</span><span class=\"mord cjk_fallback\">加</span><span class=\"mord cjk_fallback\">载</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord cjk_fallback\">性</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">消</span><span class=\"mord cjk_fallback\">耗</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">提</span><span class=\"mord cjk_fallback\">高</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">户</span><span class=\"mord cjk_fallback\">体</span><span class=\"mord cjk_fallback\">验</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">怎</span><span class=\"mord cjk_fallback\">么</span><span class=\"mord cjk_fallback\">做</span><span class=\"mord cjk_fallback\">封</span><span class=\"mord cjk_fallback\">装</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">？</span><span class=\"mord cjk_fallback\">下</span><span class=\"mord cjk_fallback\">载</span><span class=\"mord cjk_fallback\">创</span><span class=\"mord cjk_fallback\">建</span><span class=\"mord cjk_fallback\">实</span><span class=\"mord cjk_fallback\">例</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">着</span><span class=\"mord cjk_fallback\">封</span><span class=\"mord cjk_fallback\">装</span><span class=\"mord cjk_fallback\">请</span><span class=\"mord cjk_fallback\">求</span><span class=\"mord cjk_fallback\">响</span><span class=\"mord cjk_fallback\">应</span><span class=\"mord cjk_fallback\">拦</span><span class=\"mord cjk_fallback\">截</span><span class=\"mord cjk_fallback\">器</span><span class=\"mord cjk_fallback\">抛</span><span class=\"mord cjk_fallback\">出</span><span class=\"mord cjk_fallback\">最</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">封</span><span class=\"mord cjk_fallback\">装</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">口</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">路</span><span class=\"mord cjk_fallback\">由</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">怎</span><span class=\"mord cjk_fallback\">么</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">？</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>router.push({name:'index',params:{id:item.id}})<br />\nthis.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi><mi>i</mi><mi>d</mi><mtext>路由属性传参</mtext><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">route.params.id\n        路由属性传参\n            this.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord cjk_fallback\">路</span><span class=\"mord cjk_fallback\">由</span><span class=\"mord cjk_fallback\">属</span><span class=\"mord cjk_fallback\">性</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>router.push({name:'/index/{item.id}'})\n            路由配置 { path:'/index:id' }\n        query传参（可以解决页面刷新参数丢失的问题）\n            this.router.push({<br />\nname:'index',<br />\nquery:{id:item.id}<br />\n})<br />\n 12.vue 路由的 hash 模式和 history 模式有什么区别？<br />\n1.hash 的路由地址上有 #号，history 模式没有<br />\n 2. 在做回车刷新的时候，hash 模式会加载对应页面，history 会报错 404<br />\n3.hash 模式支持低版本浏览器，history 不支持，因为是 H5 新增的 API<br />\n4.hash 不会重新加载页面，单页面应用必备<br />\n 5.history 有历史记录，H5 新增了 pushState 和 replaceState () 去修改历史记录，并不会立刻发送请求<br />\n 6.history 需要后台配置<br />\n 13. 路由拦截是怎么实现的？<br />\n路由拦截 axios 拦截<br />\n需要在路由配置中添加一个字段，它是用于判断路由是否需要拦截<br />\n {<br />\nname:'index',<br />\npath:'/index',<br />\ncomponent:Index,<br />\nmeta:{<br />\nrequirtAuth:true<br />\n}<br />\n}<br />\nrouter.beforeEach((to,from,next) =&gt; {<br />\nif(to.meta.requirtAuth){<br />\nif( store.satte.token ){<br />\nnext()<br />\n}else{</p>\n<pre><code>            &#125;\n        &#125;\n    &#125;)\n14.说一下vue的动态路由。\n    要在路由配置里设置meat属性，扩展权限相关的字段，在路由导航守卫里通过判断这个权限标识，实现路由的动态增加和跳转\n    根据用户登录的账号，返回用户角色\n    前端再根据角色，跟路由表的meta.role进行匹配\n    把匹配搭配的路由形成可访问的路由\n15.如何解决刷新后二次加载路由？\n    1.window.location.reload()\n    2.matcher\n        const router = createRouter()\n        export function resetRouter()&#123;\n            const newRouter = creatRouter()\n            router.matcher = newRouter.matcher\n        &#125;\n16.vuex刷新数据会丢失吗？怎么解决？\n    vuex肯定会重新获取数据，页面也会丢失数据\n    1.把数据直接保存在浏览器缓存里（cookie  localstorage  sessionstorage）\n    2.页面刷新的时候，再次请求数据，达到可以动态更新的方法\n        监听浏览器的刷新书简，在刷新前把数据保存到sessionstorage里，刷新后请求数据，请求到了用vuex，如果没有那就用sessionstorage里的数据\n17.computed和watch的区别？\n    1.computed是计算属性，watch是监听，监听的是data中数据的变化\n    2.computed是支持缓存，依赖的属性值发生变化，计算属性才会重新计算，否则用缓存；watch不支持缓存\n    3.computed不支持异步，watch是可以异步操作\n    4.computed是第一次加载就监听，watch是不监听\n    5.computed函数中必须有return  watch不用\n18.vuex在什么场景会去使用？属性有哪些？\n    state       存储变量\n    getters     state的计算属性\n    mutations   提交更新数据的方法\n    actions     和mutations差不多，他是提交mutations来修改数据，可以包括异步操作\n    modules     模块化vuex\n    使用场景：\n        用户的个人信息、购物车模块、订单模块\n19.vue的双向数据绑定原理是什么？\n    通过数据劫持和发布订阅者模式来实现，同时利用Object.defineProperty()劫持各个属性的setter和getter，\n    在数据发生改变的时候发布消息给订阅者，触发对应的监听回调渲染视图，也就是说数据和视图时同步的，数据发生改变，视图跟着发生改变，视图改变，数据也会发生改变。\n    第一步：需要observer的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter\n    第二步：compile模板解析指令，把模板中的变量替换成数据，然后初始化渲染视图，同时把每个指令对应的节点绑定上更新函数，添加订阅者，如果数据变化，收到通知，更新视图\n    第三步：Watcher订阅者是Observer和Compile之间的通信桥梁，作用：\n            1.在自身实例化的时候忘订阅器内添加自己\n            2.自身要有一个update()方法\n            3.等待属性变动时，调用自身的update方法，触发compile这种的回调\n    第四步：MVVM作为数据绑定的入口，整合了observer、compile和watcher三者，通过observer来监听自己的数据变化，通过compile解析模板指令，最后利用watcher把observer和compile联系起来，最终达到数据更新视图更新，视图更新数据更新的效果\n20.了解diff算法和虚拟DOM吗？\n    虚拟DOM，描述元素和元素之间的关系，创建一个JS对象\n    如果组件内有响应的数据，数据发生改变的时候，render函数会生成一个新的虚拟DOM，这个新的虚拟DOM会和旧的虚拟DOM进行比对，找到需要修改的虚拟DOM内容，然后去对应的真实DOM中修改\n    diff算法就是虚拟DOM的比对时用的，返回一个patch对象，这个对象的作用就是存储两个节点不同的地方，最后用patch里记录的信息进行更新真实DOM\n    步骤：\n        1.JS对象表示真实的DOM结构，要生成一个虚拟DOM，再用虚拟DOM构建一个真实DOM树，渲染到页面\n        2.状态改变生成新的虚拟DOM，跟就得虚拟DOM进行比对，这个比对的过程就是DIFF算法，利用patch记录差异\n        3.把记录的差异用在第一个虚拟DOM生成的真实DOM上，视图就更新了。\n21.vue和jquery的区别是什么？\n    1.原理不同\n        vue就是数据绑定；jq是先获取dom再处理\n    2.着重点不同\n        vue是数据驱动，jq是着重于页面\n    3.操作不同\n    4.未来发展不同\n22.vuex的响应式处理。\n    vuex是vue的状态管理工具\n    vue中可以直接触发methods中的方法，vuex是不可以的。未来处理异步，当触发事件的时候，会通过dispatch来访问actions中的方法，actions中的commit会触发mutations中的方法从而修改state里的值，通过getter把数据更新到视图\n    Vue.use(vuex)，调用install方法，通过applyMixin(vue)在任意组件内执行this.$store就可以访问到store对象。\n    vuex的state是响应式的，借助的就是vue的data，把state存到vue实例组件的data中\n23.vue中遍历全局的方法有哪些？\n    1.普通遍历，对象.forEach()\n        arr.forEach(function(item,index,arr)&#123;\n            console.log(item,index)\n        &#125;)\n    2.对元素统一操作  对象.map()\n        var newarr = arr.map(function(item)&#123;\n            return item+1\n        &#125;)\n    3.查找符合条件的元素 对象.filter()\n        arr.filter(function(item)&#123;\n            if(item &gt; 2)&#123;\n                return false\n            &#125;else&#123;\n                return true\n            &#125;\n        &#125;)\n    4.查询符合条件的元素，返回索引 对象.findindex()\n        arr.finindex(function(item)&#123;\n            if(item&gt;1)&#123;\n                return true\n            &#125;else&#123;\n                return false\n            &#125;\n        &#125;)\n    对象.evening()  遇到不符合的对象会停止\n    对象.some()  找到符合条件的元素就停止\n24.如何搭建脚手架？\n    下载：node  cnpm  webpack vue-cli\n    创建项目：\n        1.找到对应的文件，然后利用node指令创建（cmd）\n        2.vue init webpack xxxx\n        3.回车项目描述\n        4.作者回车\n        5.选择vue build\n        6.回车\n        7.输入n\n        8.不按照yarn\n        9.输入npm run dev\n25.如何封装一个组件？\n    1.使用Vue.extend()创建一个组件\n    2.使用Vue.components()方法注册组件\n    3.如果子组件需要数据，可以在props中接收定义\n    4.子组件修改好数据，要把数据传递给父组件，可以用emit()方法\n    原则：\n        把功能拆开\n        尽量让组件原子化，一个组件做一件事情\n        容器组件管数据，展示组件管视图\n26.封装一个可复用的组件，需要满足什么条件？\n    1.低耦合，组件之间的依赖越小越好\n    2.最好从父级传入信息，不要在公共组件中请求数据\n    3.传入的数据要进行校验\n    4.处理事件的方法写在父组件中\n27.vue的过滤器怎么使用？\n    vue的特性，用来对文本进行格式化处理\n    使用它的两个地方，一个是插值表达式，一个是v-bind\n    分类：\n        1.全局过滤器\n            Vue.filter('add',function(v)&#123;\n                return v &lt; 10 ? '0' + v : v\n            &#125;)\n            &lt;div&gt;&#123;&#123;33 | add&#125;&#125;&lt;/div&gt;\n        2.本地过滤器\n            和methods同级\n            filter:&#123;\n                add:function(v)&#123;\n                    return v &lt; 10 ? '0' + v : v\n                &#125;\n            &#125;\n28.vue中如何做强制刷新？\n    1.localtion.reload()\n    2.this.$router.go(0)\n    3.provide和inject\n29.vue3和vue2有哪些区别？\n    1.双向数据绑定的原理不同\n    2.是否支持碎片\n    3.API不同\n    4.定义数据变量方法不同\n    5.生命周期的不同\n    6.传值不同\n    7.指令和插槽不同\n    8.main.js不同\n30.vue的性能优化怎么做？\n    1.编码优化\n        不要把所有数据都放在data中\n        v-for时给每个元素绑定事件用事件代理\n        keep-alive缓存组件\n        尽可能拆分组件，提高复用性、维护性\n        key值要保证唯一\n        合理使用路由懒加载，异步组件\n        数据持久化存储的使用尽量用防抖、节流优化\n    2.加载优化\n        按需加载\n        内容懒加载\n        图片懒加载\n    3.用户体验\n        骨架屏\n    4.SEO优化\n        预渲染\n        服务端渲染ssr\n    5.打包优化\n        CDN形式加载第三方模块\n        多线程打包\n        抽离公共文件\n    6.缓存和压缩\n        客户端缓存、服务端缓存\n        服务端Gzip压缩\n31.首屏优化该如何去做？\n    1.使用路由懒加载\n    2.非首屏组件使用异步组件\n    3.首屏不中要的组件延迟加载\n    4.静态资源放在CDN上\n    5.减少首屏上JS、CSS等资源文件的大小\n    6.使用服务端渲染\n    7.简历减少DOM的数量和层级\n    8.使用精灵图请求\n    9.做一些loading\n    10.开启Gzip压缩\n    11.图片懒加载\n32.vue3的性能为什么比vue2好？\n    1.diff算法的优化\n    2.静态提升\n    3.事件侦听缓存\n33.vue3为什么使用proxy？\n    1.proxy可以代理整个对象，defineproperty只代理对象上的某个属性\n    2.proxy对代理对象的监听更加丰富\n    3.proxy代理对象会生成新的对象，不会修改被代理对象本身\n    4.proxy补兼容ie浏览器\n34.说一下你对组件的理解。\n    可以重复使用的vue实例，独一无二的组件名称\n    可以抽离单独的公共模块\n    提高代码的复用率\n35.你是如何规划项目文件的？\n    public\n        图标、index.html、img\n    src\n        api\n        assets\n        components\n            按分类再次划分子目录\n        plugins\n        router\n        static\n        styles\n        utils\n        views\n    App.vue\n    main.js\n    package.json\n    vue.config.js\n36.是否使用过nuxt.js？\n    是基于vue的应用框架，关注的是渲染，可以开发服务端渲染应用的配置\n    SSR：服务端渲染\n        好处：\n            SSR生成的是有内容的HTML页面，有利于搜索引擎的搜索\n            优化了首屏加载时间\n    SEO：优化搜索引擎\n    SPA的应用不利于搜索引擎SEO的操作\n37.SEO如何优化？\n    1.SSR\n    2.预渲染 prerender-spa-plugin\n</code></pre>\n<p>五、Echarts<br />\n1.echarts 有用过吗？常用的组件有哪些？<br />\ntitle 标题组件 show  text  link<br />\ntoolbox 工具栏 导出图片 数据视图 切换 缩放 show orient feature<br />\ntooltip tigger 触发类型<br />\n markPoint 标注点<br />\n markLine 图标的标线</p>\n<p>六、Uni-APP<br />\n1.uni-app 有没有做过分包？<br />\n优化小程序的下载和启动速度<br />\n小程序启动默认下载主包并启动页面，当用户进入分包时，才会下载对应的分包，下载完进行展示</p>\n<p>七、Weabpack<br />\n1.webpack 打包和不打包的区别？<br />\n1. 运行效率<br />\n 2. 对基础的支持不够<br />\n 2.webpack 是怎么打包的，babel 是做什么的？<br />\nwebpack 会把 js css image 看作一个模块，用 import/require 引入<br />\n找到入口文件，通过入口文件找到关联的依赖文件，把他们打包到一起<br />\n把 bundle 文件，拆分成多个小的文件，异步按需加载所需要的文件<br />\n如果一个被多个文件引用，打包时只会生成一个文件<br />\n如果引用的文件没有调用，不会打包，如果引入的变量和方法没有调用也不会打包<br />\n对于多个入口文件，加入引入了相同的代码，可以用插件把他抽离到公共文件中</p>\n<p>八、Git<br />\n1.git 如何合并、拉取代码？<br />\n拉取代码 git pull ' 仓库地址'<br />\n 查看状态 git sattus<br />\n 提交到本地缓存区  git add .<br />\n 提交本地仓库 git commit -m ' 修改描述'<br />\n 提交到远程仓库 git push ' 仓库地址 ' master<br />\n 创建分支 git branch -b xxx<br />\n 合并分支 git merge ' 合并分支的名字'<br />\n2.git 如何解决冲突问题？<br />\n1. 两个分支中修改了同一个文件<br />\n 2. 两个分支中修改了同一个文件的名字<br />\n 1. 解决：当前分支上，直接修改代码  add  commit<br />\n2. 解决：在本地当前分支上，修改冲突代码 add commit push</p>\n<p>九、HR<br />\n1. 你的离职原因是什么？<br />\n疫情 社保 薪资问题 个人发展 技术提升 家庭因素<br />\n 2. 工作到现在，项目中遇到最难的问题是什么？怎么解决的？<br />\n1. 不要回答，没有问题<br />\n 2. 不要说一些常见的简单的问题，比如：数据请求不过来、渲染页面时出现了问题、跳转路由不会...<br />\n 首先应该时自行去查找资料寻求解决办法，然后再去请教同时或者组长<br />\n 3. 你的优势在哪里？<br />\n1. 尽量不要暴露自己的缺点<br />\n 2. 不要过度美化自己<br />\n 4. 如何协同工作？<br />\n1. 开发前会开个会议，最后形成一个开发文档<br />\n 2. 利用工具保证项目的正常进度，规范化</p>\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/2023/07/12/1/",
            "url": "https://blog.mengcodes.com/Web/2023/07/12/1/",
            "title": "JS宏任务和微任务",
            "date_published": "2023-07-12T09:46:41.000Z",
            "content_html": "<p>JS 宏任务和微任务</p>\n<ul>\n<li>前排感谢 CSDN 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yc3poYW5nMTExL2FydGljbGUvZGV0YWlscy8xMjY4NjE2Njk=\"> 奔波儿灞... </span><br />\n<a id=\"more\"></a></li>\n</ul>\n<h1 id=\"什么是微任务和宏任务\"><a class=\"anchor\" href=\"#什么是微任务和宏任务\">#</a> 什么是微任务和宏任务</h1>\n<ul>\n<li>首先，我们要先了解下 Js 。Js 是一种单线程语言，简单的说就是：只有一条通道，那么在任务多的情况下，就会出现拥挤的情况，这种情况下就产生了 ‘多线程’ ，但是这种 “多线程” 是通过单线程模仿的，也就是假的。那么就产生了同步任务和异步任务。</li>\n</ul>\n<h1 id=\"js为什么要区分微任务和宏任务\"><a class=\"anchor\" href=\"#js为什么要区分微任务和宏任务\">#</a> JS 为什么要区分微任务和宏任务</h1>\n<ul>\n<li>（1）js 是单线程的，但是分同步异步</li>\n<li>（2）微任务和宏任务皆为异步任务，它们都属于一个队列</li>\n<li>（3）宏任务一般是：script、setTimeout、setInterval、postMessage、MessageChannel、setImmediate (Node.js 环境)</li>\n<li>（4）微任务：Promise.then、Object.observe、MutationObserver、process.nextTick (Node.js 环境)</li>\n<li>（5）先执行同步再执行异步，异步遇到微任务，先执行微任务，执行完后如果没有微任务，就执行下一个宏任务，如果有微任务，就按顺序一个一个执行微任务</li>\n</ul>\n<h1 id=\"微任务和宏任务有哪些\"><a class=\"anchor\" href=\"#微任务和宏任务有哪些\">#</a> 微任务和宏任务有哪些</h1>\n<ul>\n<li>\n<p>（1）宏任务一般是：script、setTimeout、setInterval、postMessage、MessageChannel、setImmediate (Node.js 环境)</p>\n</li>\n<li>\n<p>（2）微任务：Promise.then、Object.observe、MutationObserver、process.nextTick (Node.js 环境)</p>\n</li>\n</ul>\n<h1 id=\"微任务和宏任务是怎么执行的\"><a class=\"anchor\" href=\"#微任务和宏任务是怎么执行的\">#</a> 微任务和宏任务是怎么执行的？</h1>\n<ul>\n<li>执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。</li>\n</ul>\n<p>这里容易产生一个错误的认识：就是微任务先于宏任务执行。实际上是先执行同步任务然后在执行异步任务，异步任务是分宏任务和微任务两种的。</p>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<h2 id=\"例1\"><a class=\"anchor\" href=\"#例1\">#</a> 例 1</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;\t\t    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;\t\t    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;); \t\t</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">2 5 3 4 1</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到setTimout，异步宏任务，放入宏任务队列中\n2.遇到new Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出2\n3.Promise.then，异步微任务，将其放入微任务队列中\n4.遇到同步任务console.log(5);输出5；主线程中同步任务执行完\n5.从微任务队列中取出任务到主线程中，输出3、 4，微任务队列为空\n6.从宏任务队列中取出任务到主线程中，输出1，宏任务队列为空\n</code></pre>\n</div>\n<h2 id=\"例2\"><a class=\"anchor\" href=\"#例2\">#</a> 例 2</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span>&#123;</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;).then( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;before timeout&#x27;</span>);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;also before timeout&#x27;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//1，2，3，before timeout，also before timeout，4，test;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">1，2，3，before timeout，also before timeout，4，test</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到setTimeout，异步宏任务，将() =&gt; &#123;console.log(4)&#125;放入宏任务队列中；\n2.遇到new Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出1；\n3.而Promise.then，异步微任务，将其放入微任务队列中\n4.遇到同步任务console.log(2)，输出2；主线程中同步任务执行完\n5.从微任务队列中取出任务到主线程中，输出3，此微任务中又有微任务，Promise.resolve().then(微任务a).then(微任务b)，将其依次放入微任务队列中；\n6.从微任务队列中取出任务a到主线程中，输出 before timeout；\n7.从微任务队列中取出任务b到主线程中，任务b又注册了一个微任务c，放入微任务队列中；\n8.从微任务队列中取出任务c到主线程中，输出 also before timeout；微任务队列为空\n9.从宏任务队列中取出任务到主线程，此任务中注册了一个微任务d，将其放入微任务队列中，接下来遇到输出4，宏任务队列为空\n10.从微任务队列中取出任务d到主线程 ，输出test，微任务队列为空\n</code></pre>\n</div>\n<h2 id=\"例3\"><a class=\"anchor\" href=\"#例3\">#</a> 例 3</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">1，3，4，2</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到同步任务console.log(1);输出1；\n2.遇到setTimeout 异步宏任务，放入宏任务队列中；\n3.遇到 Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，但由于new Promise没有输出事件，所以接着执行遇到.then；\n4.执行.then，异步微任务,被分发到微任务Event Queue中；\n5.遇到同步任务console.log(3);输出3；\n6.主线程中同步任务执行完，从微任务队列中取出任务到主线程中，p.then 输出4,微任务执行完毕，任务队列为空；\n7.开始执行宏任务setTimeout 输出2,宏任务队列为空；\n</code></pre>\n</div>\n<h2 id=\"例4\"><a class=\"anchor\" href=\"#例4\">#</a> 例 4</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">1，5，10，6，2，3，4，7，8，9</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到同步任务console.log(1);输出1；\n2.遇到setTimeout 异步宏任务，放入宏任务队列中；\n3.遇到 Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出5，所以接着执行遇到.then；\n4.执行.then，异步微任务,被分发到微任务Event Queue中；\n5.遇到setTimeout，异步宏任务;放入宏任务队列中；\n6.遇到同步任务console.log(10);输出10,主线程中同步任务全部执行完;\n7.从微任务队列中取出任务到主线程中，输出6；\n8.在从宏任务队列中取出任务到主线程中，执行第一个setTimeout，输出2，3，4（在宏任务中执行同步,同步，异步微任务）;\n9.在执行第二个setTimeout，输出7，8，9（和8同理）；\n</code></pre>\n</div>\n<h2 id=\"例5\"><a class=\"anchor\" href=\"#例5\">#</a> 例 5</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">3，2，1</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到Promise,new Promise在实例化的过程中所执行的代码都是同步进行的,但由于new Promise没有输出事件，所以接着往下执行遇到new Promise没有输出事件再接着往下执行遇到.then,异步微任务,被分发到微任务Event Queue中，再接着 .then 放入微任务\n2.遇到同步任务console.log(3) 输出3，主线程中同步任务执行完；\n3.从微任务队列中取出任务到主线程中，输出2，1，微任务执行完毕，任务队列为空。\n</code></pre>\n</div>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<div class=\"note success\">\n<p>微任务和宏任务的执行顺序是先执行同步任务，先执行同步后异步，异步分为宏任务和微任务两种，异步遇到微任务先执行微任务，执行完后如果没有微任务，就执行下一个宏任务。</p>\n</div>\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Vue/2023/07/12/1/",
            "url": "https://blog.mengcodes.com/Web/Vue/2023/07/12/1/",
            "title": "Websocket的使用",
            "date_published": "2023-07-12T07:48:35.000Z",
            "content_html": "<p>Websocket 在项目中的应用<br />\n<a id=\"more\"></a></p>\n<h1 id=\"在vue3-中使用-websocket\"><a class=\"anchor\" href=\"#在vue3-中使用-websocket\">#</a> 在 Vue3 中使用 Websocket</h1>\n<h2 id=\"在utils目录下新建-websocketjs文件\"><a class=\"anchor\" href=\"#在utils目录下新建-websocketjs文件\">#</a> 在 utils 目录下新建 webSocket.js 文件</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> *  webSocketURL：String    webSocket服务地址    eg: ws://127.0.0.1:8088/websocket (后端接口若为restful风格可以带参数)</span></span><br><span class=\"line\"><span class=\"comment\"> *  callback：为带一个参数的回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> *  message：String 要传递的参数值（不是一个必要的参数）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化webSocket</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">webSocketInit</span>(<span class=\"params\">webSocketURL</span>)</span>&#123;      <span class=\"comment\">// ws://127.0.0.1:8088/websocket</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket = <span class=\"keyword\">new</span> WebSocket(webSocketURL);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onopen = <span class=\"built_in\">this</span>.onOpenwellback;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onmessage = <span class=\"built_in\">this</span>.onMessageCallback;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onerror = <span class=\"built_in\">this</span>.onErrorCallback;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onclose = <span class=\"built_in\">this</span>.onCloseCallback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义回调函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setOpenCallback</span>(<span class=\"params\">callback</span>)</span>&#123; <span class=\"comment\">//  与服务端连接打开回调函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onopen = callback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setMessageCallback</span>(<span class=\"params\">callback</span>)</span>&#123;   <span class=\"comment\">//  与服务端发送消息回调函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onmessage = callback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setErrorCallback</span>(<span class=\"params\">callback</span>)</span>&#123; <span class=\"comment\">//  与服务端连接异常回调函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onerror = callback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setCloseCallback</span>(<span class=\"params\">callback</span>)</span>&#123; <span class=\"comment\">//  与服务端连接关闭回调函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onclose = callback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">close</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.close();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sendMessage</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.send(message);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在文件中引用\"><a class=\"anchor\" href=\"#在文件中引用\">#</a> 在文件中引用</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> webSocket <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/webSocket&#x27;</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化websocket</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWebsocket</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> webSocketUrl = <span class=\"keyword\">import</span>.meta.env.VITE_APP_SOCKET_API;</span><br><span class=\"line\">  webSocket.webSocketInit(webSocketUrl + <span class=\"string\">`/websocket/platform<span class=\"subst\">$&#123;id&#125;</span>`</span>); <span class=\"comment\">//初始化webSocket</span></span><br><span class=\"line\">  webSocket.setOpenCallback(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;连接建立成功&quot;</span>,res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  webSocket.setMessageCallback(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resData = <span class=\"built_in\">JSON</span>.parse(res.data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;接收到回信&#x27;</span>, resData);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, type &#125; = resData;</span><br><span class=\"line\">    <span class=\"comment\">// 根据不同的type 去执行不同的操作 </span></span><br><span class=\"line\">    <span class=\"comment\">// 登录</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;3&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; nickName, userDept, userName &#125; = data;</span><br><span class=\"line\">      ···</span><br><span class=\"line\">      <span class=\"comment\">// 退出</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;4&#x27;</span>) &#123;</span><br><span class=\"line\">      ···</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;5&#x27;</span>) &#123;</span><br><span class=\"line\">      ···</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  webSocket.setErrorCallback(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;连接异常&#x27;</span>, res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"uniappvue2中使用websocket\"><a class=\"anchor\" href=\"#uniappvue2中使用websocket\">#</a> uniapp（vue2）中使用 websocket</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化时调用</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.connectSocket()</span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"comment\">//连接websocket</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">connectSocket</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;调用连接websocket&#x27;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask = uni.connectSocket(&#123;</span><br><span class=\"line\">        url:</span><br><span class=\"line\">          globalConfig.webSocketUrl +</span><br><span class=\"line\">          <span class=\"string\">`/websocket/uniapp<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.$store.state.userInfo.user.userId&#125;</span>`</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;websocket连接成功&#x27;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">fail</span>(<span class=\"params\">err</span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;报错&#x27;</span>, err);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask.onOpen(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;WebSocket连接已打开！&#x27;</span>);</span><br><span class=\"line\">        that.heart()</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask.onMessage(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> resData = <span class=\"built_in\">JSON</span>.parse(res.data);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;接收到回信&#x27;</span>, resData);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data, type &#125; = resData;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;6&#x27;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask.onError(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;WebSocket连接打开失败，请检查！&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">        <span class=\"comment\">//进入重新连接</span></span><br><span class=\"line\">        that.reconnect();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// // 监听连接关闭 -</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask.onClose(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;WebSocket连接关闭！&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// clearInterval(that.timer)</span></span><br><span class=\"line\">        <span class=\"comment\">// that.timer = &#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// if (!that.isClose) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// that.reconnect()</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// console.log(this.socketTask)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//进入重新连接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">reconnect</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;进入断线重连&#x27;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// this.socketTask.close();</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.connectSocket();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sendSocketMessage</span>(<span class=\"params\">msg</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送信息&#x27;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socketTask.send(&#123;</span><br><span class=\"line\">          data: msg,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送成功&#x27;</span>);</span><br><span class=\"line\">            reslove(res);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">fail</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送失败&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">            reject(res);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//心跳</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">heart</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.timer);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.timer = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> msg = &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;heartbeat&#x27;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        that</span><br><span class=\"line\">          .sendSocketMessage(<span class=\"built_in\">JSON</span>.stringify(msg))</span><br><span class=\"line\">          .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;心跳成功&#x27;</span>);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .catch(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送失败&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;, <span class=\"number\">200000</span>);</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Vue"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Webpack/2021/12/23/1/",
            "url": "https://blog.mengcodes.com/Web/Webpack/2021/12/23/1/",
            "title": "Webpack基础",
            "date_published": "2021-12-23T08:32:30.000Z",
            "content_html": "<p>学习一下 <span class=\"red\">Webpack</span>, 顺便记录一下。<br />\n<a id=\"more\"></a></p>\n<h1 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h1>\n<ul>\n<li>本质上，<span class=\"red\">Webpack</span> 是一个用于现代 <span class=\"red\">JavaScript</span> 应用程序的 <span class=\"blue\">静态模块打包工具</span>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图 (dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。</li>\n</ul>\n<h2 id=\"入口entry\"><a class=\"anchor\" href=\"#入口entry\">#</a> 入口（entry）</h2>\n<ul>\n<li>入口起点 (entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图 (dependency graph) 的开始。默认值是 ./src/index.js，可以通过配置文件 (webpack.config.js) 修改。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"输出output\"><a class=\"anchor\" href=\"#输出output\">#</a> 输出 (output)</h2>\n<ul>\n<li>output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>) <span class=\"comment\">// 引入node.js的path模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">// 打包之后的名字</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>), <span class=\"comment\">// 打包之后的路径  注意要使用绝对路径 __dirname表示获取到当前webpack.congfig.js 的物理路径， &#x27;./dist&#x27;表示基于这个物理路径解析到当前目录下的dist</span></span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>, <span class=\"comment\">// 打包时清除上次缓存</span></span><br><span class=\"line\">    assetModuleFilename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span> <span class=\"comment\">// 静态资源打包之后路径及命名 contenthash 根据文件内容生产哈希字符串 ext 扩展名 [] webpack系统自带的默认的生产文件名的方法</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"loader加载器\"><a class=\"anchor\" href=\"#loader加载器\">#</a> loader (加载器)</h2>\n<ul>\n<li>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。loader 可以让 webpack 解析其他类型的文件，并将它们转换为有效 模块。在 webpack 的配置中，loader 有两个属性：<br />\ntest 属性，识别出哪些文件会被转换。<br />\nuse 属性，定义出在进行转换时，应该使用哪个 loader。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>) <span class=\"comment\">// 引入node.js的path模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">// 打包之后的名字</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>), <span class=\"comment\">// 打包之后的路径  注意要使用绝对路径 __dirname表示获取到当前webpack.congfig.js 的物理路径， &#x27;./dist&#x27;表示基于这个物理路径解析到当前目录下的dist</span></span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>, <span class=\"comment\">// 打包时清除上次缓存</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(css|less)$/</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;less-loader&#x27;</span>] <span class=\"comment\">// 后面先执行 逆序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"插件plugin\"><a class=\"anchor\" href=\"#插件plugin\">#</a> 插件 (plugin)</h2>\n<ul>\n<li>webpack 编译器经过加工之后生成目标文件，比如生成 js，css 文件，webpack 编译的过程需要一些工具来帮忙，这些工具就是插件。loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量等。</li>\n<li>想要使用一个插件，你只需要 require () 它，然后把它添加到 plugins 数组中。多数插件可以通过选项 (option) 自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建一个插件实例。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    assetModuleFilename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span> </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">&#x27;inline-source-map&#x27;</span>,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;./index.html&#x27;</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;app.html&#x27;</span>,</span><br><span class=\"line\">      inject: <span class=\"string\">&#x27;body&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>: <span class=\"string\">&#x27;./dist&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.png$/</span>,  <span class=\"comment\">// 正则 //  .png . 需要转化 \\.png  $ 表示以png作为拓展名的这种类型的文件</span></span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/resource&#x27;</span>,</span><br><span class=\"line\">        generator: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// filename: &#x27;images/test.png&#x27; //</span></span><br><span class=\"line\">          filename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.svg$/</span>,</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/inline&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.txt$/</span>, </span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/source&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jpg$/</span>,</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">        parser: &#123;</span><br><span class=\"line\">          dataUrlCondition: &#123;</span><br><span class=\"line\">            maxSize: <span class=\"number\">4</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"模式mode\"><a class=\"anchor\" href=\"#模式mode\">#</a> 模式 (mode)</h2>\n<ul>\n<li>通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"浏览器兼容性browser-compatibility\"><a class=\"anchor\" href=\"#浏览器兼容性browser-compatibility\">#</a> 浏览器兼容性 (browser compatibility)</h2>\n<ul>\n<li>Webpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）</li>\n</ul>\n<h2 id=\"环境environment\"><a class=\"anchor\" href=\"#环境environment\">#</a> 环境 (environment)</h2>\n<ul>\n<li>Webpack 5 运行于 Node.js v10.13.0+ 的版本。<br />\n<img data-src=\"https://s2.loli.net/2021/12/23/jh6sPfOzButMXrG.png\" alt=\"image.png\" /><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Webpack"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Ts/2021/12/03/1/",
            "url": "https://blog.mengcodes.com/Web/Ts/2021/12/03/1/",
            "title": "TS手册",
            "date_published": "2021-12-03T07:22:09.000Z",
            "content_html": "<p>学习一下 <span class=\"red\">TypeScript</span>, 顺便记录一下。<br />\n<a id=\"more\"></a></p>\n<h1 id=\"基础类型\"><a class=\"anchor\" href=\"#基础类型\">#</a> 基础类型</h1>\n<h2 id=\"布尔值\"><a class=\"anchor\" href=\"#布尔值\">#</a> 布尔值</h2>\n<ul>\n<li>true/false<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isDone: boolean = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h2>\n<ul>\n<li>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。这些浮点数的类型是 number。除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015 中引入的二进制和八进制字面量。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: number = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: number = <span class=\"number\">0xf00d</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryLiteral: number = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> octalLiteral: number = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<ul>\n<li>和 JavaScript 一样，可以使用双引号（&quot;）或单引号（'）表示字符串。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name: string = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>还可以使用 模板字符串。 这种字符串是被反引号包围（`），并且以 ${expr} 这种形式嵌入表达式<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name: string = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age: number = <span class=\"string\">&#x27;22&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> text: string = <span class=\"string\">`my name is &amp;&#123;name&#125;, my age is <span class=\"subst\">$&#123;age&#125;</span>;`</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<ul>\n<li>有两种方式可以定义数组。</li>\n<li>第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> list: number[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li>第二种方式是使用数组泛型，Array &lt;元素类型&gt;：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">Array</span>&lt;number&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"元组-tuple\"><a class=\"anchor\" href=\"#元组-tuple\">#</a> 元组 Tuple</h2>\n<ul>\n<li>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x: [string, number];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">22</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\">x = [<span class=\"number\">22</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>]; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h2>\n<ul>\n<li>enum 类型是对 JavaScript 标准数据类型的一个补充。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red, Green, Blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> color: Color = Color.Red;</span><br></pre></td></tr></table></figure></li>\n<li>默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 1 开始编号<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red = <span class=\"number\">1</span>, Green, Blue = <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> color: Color = Color.Red;</span><br></pre></td></tr></table></figure></li>\n<li>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red = <span class=\"number\">1</span>, Green, Blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> colorName: string = Color[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colorName); <span class=\"comment\">// Green</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"函数类型\"><a class=\"anchor\" href=\"#函数类型\">#</a> 函数类型</h2>\n<ul>\n<li>为函数定义类型。我们可以给每个参数添加类型之后再为函数本身添加返回值类型<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\">a: number,b: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 参数的个数必须要完全相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\">a: number,b?: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func2&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置可选参数必须放最后面</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2(<span class=\"number\">1</span>) <span class=\"comment\">// ok b为可选参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func3</span> (<span class=\"params\">a: number,b: number = <span class=\"number\">10</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func3&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置参数b的默认值 （设置默认值的参数必须放最后面）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func4</span> (<span class=\"params\">a: number,b: number, ...rest: number[]</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func4&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置接收任意数量的参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>使用函数表达式<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func1: <span class=\"function\">(<span class=\"params\">a: number, b: number</span>) =&gt;</span> string = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a: number, b: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"any\"><a class=\"anchor\" href=\"#any\">#</a> Any</h2>\n<ul>\n<li>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型，那么我们可以使用 any 类型来标记这些变量<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: any = <span class=\"literal\">false</span>;</span><br><span class=\"line\">a = <span class=\"string\">&#x27;zhangsan&#x27;</span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">a = <span class=\"number\">22</span>; <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure></li>\n<li>当你只知道一部分数据的类型时，any 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list: any[] = [<span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">list[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"void\"><a class=\"anchor\" href=\"#void\">#</a> Void</h2>\n<ul>\n<li>void 类型像是与 any 类型相反，它表示没有任何类型。只能赋予它 undefined 和 null。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> unusable: <span class=\"keyword\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"null-和-undefined\"><a class=\"anchor\" href=\"#null-和-undefined\">#</a> Null 和 Undefined</h2>\n<ul>\n<li>TypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。默认情况下 null 和 undefined 是所有类型的子类型。和 void 相似，它们的本身的类型用处不是很大：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n: <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"never\"><a class=\"anchor\" href=\"#never\">#</a> Never</h2>\n<ul>\n<li>never 类型表示的是那些永不存在的值的类型。</li>\n</ul>\n<h2 id=\"object\"><a class=\"anchor\" href=\"#object\">#</a> Object</h2>\n<ul>\n<li>Object 表示非原始类型，也就是除 number，string，boolean，symbol，null 或 undefined 之外的类型。</li>\n</ul>\n<h1 id=\"类型断言\"><a class=\"anchor\" href=\"#类型断言\">#</a> 类型断言</h1>\n<ul>\n<li>绕过编译器的类型推断，手动指定一个值的类型</li>\n<li>有两种方式。第一种：&lt;类型&gt; 变量<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: any = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: number = (&lt;string&gt;someValue).length;</span><br></pre></td></tr></table></figure></li>\n<li>第二种：变量 as 类型<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: any = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: number = (someValue <span class=\"keyword\">as</span> string).length;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"接口-interface\"><a class=\"anchor\" href=\"#接口-interface\">#</a> 接口  Interface</h1>\n<ul>\n<li>可以理解为一种规范，约束对象的结构。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submit</span> (<span class=\"params\">params: Params</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params.title)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params.content)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">submit(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;213&#x27;</span>,</span><br><span class=\"line\">  content: <span class=\"string\">&#x27;334&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"可选属性\"><a class=\"anchor\" href=\"#可选属性\">#</a> 可选属性</h2>\n<ul>\n<li>接口里的属性不全都是必需的。(属性名？: 类型)<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">  subTitle?: string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"只读属性\"><a class=\"anchor\" href=\"#只读属性\">#</a> 只读属性</h2>\n<ul>\n<li>一些对象属性只能在对象刚刚创建的时候修改其值。属性名之前加 readonly 来指定只读属性。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">  subTitle?: string</span><br><span class=\"line\">  readonly author: string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"动态成员\"><a class=\"anchor\" href=\"#动态成员\">#</a> 动态成员</h2>\n<ul>\n<li>有时候不知道具体的字段名，是动态的，例如 缓存<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  [key: string]: string</span><br><span class=\"line\">  <span class=\"comment\">// key不是固定的，可以用任意名称代替 如props</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Js",
                "Ts"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Js/2021/11/15/1/",
            "url": "https://blog.mengcodes.com/Web/Js/2021/11/15/1/",
            "title": "跳出forEach循环",
            "date_published": "2021-11-15T08:50:01.000Z",
            "content_html": "<p>有些业务场景需要用的 <span class=\"red\">forEach</span> 比如需要遍历复杂数据，只要出现一个满足条件的数据就终止掉整个循环。<br />\n<a id=\"more\"></a></p>\n<h2 id=\"跳出本次循环\"><a class=\"anchor\" href=\"#跳出本次循环\">#</a> 跳出本次循环</h2>\n<p><figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"跳出整体循环\"><a class=\"anchor\" href=\"#跳出整体循环\">#</a> 跳出整体循环</h2>\n<ul>\n<li><span class=\"red\">forEach</span> 无法通过正常流程 (如 <span class=\"red\">break</span>) 终止循环，但可通过抛出异常的方式实现终止循环<br />\n <figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;终止循环&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 打印如图：<br />\n<img data-src=\"https://i.loli.net/2021/11/15/piuhXeOL7kIWs2f.png\" alt=\"image.png\" /><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Js"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Vue/2021/02/22/1/",
            "url": "https://blog.mengcodes.com/Web/Vue/2021/02/22/1/",
            "title": "Vuex入门及使用",
            "date_published": "2021-02-22T07:54:46.000Z",
            "content_html": "<p>一个小例子掌握 Vuex 入门知识<br />\n<a id=\"more\"></a></p>\n<p>自己也是通过学习视频才了解的，前排感谢 B 站 up 主 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWg3NDExTjdiZz9wPTE=\"> 云繁 EST </span></p>\n<h1 id=\"vuex概述\"><a class=\"anchor\" href=\"#vuex概述\">#</a> Vuex 概述</h1>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。Vuex 是实现组件全局状态（数据）管理的一种机制，可以方便地实现组件之间数据的共享。</p>\n<h1 id=\"vuex的基本使用\"><a class=\"anchor\" href=\"#vuex的基本使用\">#</a> Vuex 的基本使用</h1>\n<h2 id=\"1安装vuex依赖包\"><a class=\"anchor\" href=\"#1安装vuex依赖包\">#</a> 1. 安装 vuex 依赖包</h2>\n<p><figure class=\"highlight js\"><figcaption><span>安装vuex依赖包</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuex --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2导入vuex包\"><a class=\"anchor\" href=\"#2导入vuex包\">#</a> 2. 导入 Vuex 包</h2>\n<p><figure class=\"highlight js\"><figcaption><span>导入</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3创建store对象\"><a class=\"anchor\" href=\"#3创建store对象\">#</a> 3. 创建 store 对象</h2>\n<p><figure class=\"highlight js\"><figcaption><span>创建store对象</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// state 中存放的就是全局共享的数据</span></span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4将store对象挂载到-vue-实例中\"><a class=\"anchor\" href=\"#4将store对象挂载到-vue-实例中\">#</a> 4. 将 store 对象挂载到 vue 实例中</h2>\n<p><figure class=\"highlight js\"><figcaption><span>将store对象挂载到 vue 实例中</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  <span class=\"comment\">// 将创建的共享数据对象，挂载到Vue实例中</span></span><br><span class=\"line\">  <span class=\"comment\">// 所有组件中，都可以直接从 store 中获取全局的数据</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><br />\n 我们可以通过一个小例子来熟悉 vuex 的用法：<span class=\"blue\">父组件 App.vue 上引入两个子组件，一个加法操作的 add.vue 子组件，一个减法操作的 minus.vue 子组件。父组件引入并渲染 Vuex 中的 全局共享的数据 count，通过加减法的运算来了解 count 发生的变化。</span></p>\n<ul>\n<li>我们把两个组件分隔开 准备工作完成后的 App.vue 代码如下：<br />\n<figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;Add&gt;&lt;/Add&gt;</span><br><span class=\"line\">    &lt;p&gt;--------------------------&lt;/p&gt;</span><br><span class=\"line\">    &lt;Minus&gt;&lt;/Minus&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Add <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/add&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Minus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/minus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Add,</span><br><span class=\"line\">    Minus</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"state\"><a class=\"anchor\" href=\"#state\">#</a> State</h1>\n<p>State 提供唯一的公共数据源，所有共享的数据都要统一放到 Store 的 State 中进行存储。</p>\n<ul>\n<li>我们需要在 add 和 minus 组件中 都能访问到 当前最新的 count 值 有如下两种方式</li>\n</ul>\n<h2 id=\"方法一thisstorestate全局数据名称\"><a class=\"anchor\" href=\"#方法一thisstorestate全局数据名称\">#</a> 方法一：this.$store.state. 全局数据名称</h2>\n<ul>\n<li>在 add 组件中的代码<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;当前count值为：&#123;&#123;$store.state.count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"方法二1从vuex中按需引入-mapstate-对象-2将全局数据映射为当前组件的计算属性\"><a class=\"anchor\" href=\"#方法二1从vuex中按需引入-mapstate-对象-2将全局数据映射为当前组件的计算属性\">#</a> 方法二：①从 vuex 中按需引入 mapState 对象 ②将全局数据映射为当前组件的计算属性</h2>\n<ul>\n<li>在 minus 组件中的代码<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从vuex中按需引入 mapState 对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 将全局数据映射为当前组件的计算属性</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState([<span class=\"string\">&#x27;count&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\">&lt;h3&gt;当前count值为：&#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"getter\"><a class=\"anchor\" href=\"#getter\">#</a> Getter</h1>\n<p>Getter 用于对 Store 中的数据进行加工处理形成新的数据<br />\n① Getter 可以对 Store 中已经存在的数据加工处理形成新的数据，类似 Vue 的计算属性<br />\n② Store 中数据发生变化，Getter 的数据也会跟着变化</p>\n<ul>\n<li>我们可以在 store 的 state 中新加一个 doubleCount 返回当前 count 数值的 2 倍<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`看我翻倍----  <span class=\"subst\">$&#123;state.count * <span class=\"number\">2</span>&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>Getter 相当于计算属性，使用方法与 state 中的数据一样<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在add组件中的代码</span></span><br><span class=\"line\">&lt;h3&gt;当前doubleCount值为：&#123;&#123;$store.state.doubleCount&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\"><span class=\"comment\">// 在minus组件中的代码</span></span><br><span class=\"line\"><span class=\"comment\">// 从vuex中按需引入 mapGetters 对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 将全局数据映射为当前组件的计算属性</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">&#x27;doubleCount&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"mutation\"><a class=\"anchor\" href=\"#mutation\">#</a> Mutation</h1>\n<p>Mutation 用于变更 Store 中的数据<br />\n① 只能通过 Mutation 变更 Store 中的数据，不可以直接操作 Store 中的数据<br />\n② 通过这种方式虽然操作稍微繁琐，但是可以集中监控所有公共数据的变化<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store 目录下的 index.js 定义 Mutation</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收的参数 一个是 store里面的state，另一个是我们传的其他数据</span></span><br><span class=\"line\">    add (state, step) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果无参数</span></span><br><span class=\"line\">      step ? state.count += step : state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minus (state, step) &#123;</span><br><span class=\"line\">      step ? state.count -= step : state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>我们可以在 add 组件和 minus 组件中添加按钮，动态改变 State 中 count 的值，有以下两种方式</li>\n</ul>\n<h2 id=\"方法一-thisstorecommit方法名称-其他参数\"><a class=\"anchor\" href=\"#方法一-thisstorecommit方法名称-其他参数\">#</a> 方法一: this.$store.commit (' 方法名称 ', 其他参数)</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add组件代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add1&quot;</span>&gt; +<span class=\"number\">1</span> &lt;/button&gt;</span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add2&quot;</span>&gt; +N &lt;/button&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  add1 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  add2 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"built_in\">this</span>.numN)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二1从vuex中按需引入-mapmutations-函数-2将需要的-mutations-函数映射为当前组件的-methods-方法\"><a class=\"anchor\" href=\"#方法二1从vuex中按需引入-mapmutations-函数-2将需要的-mutations-函数映射为当前组件的-methods-方法\">#</a> 方法二：①从 vuex 中按需引入 mapMutations 函数 ②将需要的 mutations 函数，映射为当前组件的 methods 方法</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// minus组件代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce1&quot;</span>&gt; -<span class=\"number\">1</span> &lt;/button&gt;</span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce2&quot;</span>&gt; -N &lt;/button&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapMutations([<span class=\"string\">&#x27;minus&#x27;</span>]),</span><br><span class=\"line\">  reduce1 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minus()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reduce2 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minus(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"action\"><a class=\"anchor\" href=\"#action\">#</a> Action</h1>\n<p>Action 用于处理异步任务。<br />\n如果通过异步操作变更数据，必须通过 Action，而不能使用 Mutation，但是在 Action 中还是要通过触发 Mutation 的方式间接变更数据。</p>\n<ul>\n<li>我们可以在 store 目录下的 index.js 中声明两个 异步方法 addAsync 和 minusAsync<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    add (state, step) &#123;</span><br><span class=\"line\">      step ? state.count += step : state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minus (state, step) &#123;</span><br><span class=\"line\">      step ? state.count -= step : state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    addAsync (context, step) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;add&#x27;</span>, step)</span><br><span class=\"line\">      &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minusAsync (context, step) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;minus&#x27;</span>, step)</span><br><span class=\"line\">      &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>触发 Action 函数的两种方式</li>\n</ul>\n<h2 id=\"方法一thisstoredispatch方法名称-其他参数\"><a class=\"anchor\" href=\"#方法一thisstoredispatch方法名称-其他参数\">#</a> 方法一：this.$store.dispatch (' 方法名称 ', 其他参数)</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add组件代码</span></span><br><span class=\"line\"><span class=\"comment\">// 页面</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add3&quot;</span>&gt; +N Async &lt;/button&gt;</span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  add3 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二1从-vuex-中按需引入-mapactons-函数-2将指定的-actions-函数映射为当前组件的-methods-函数\"><a class=\"anchor\" href=\"#方法二1从-vuex-中按需引入-mapactons-函数-2将指定的-actions-函数映射为当前组件的-methods-函数\">#</a> 方法二：①从 vuex 中按需引入 mapActons 函数 ②将指定的 actions 函数，映射为当前组件的 methods 函数</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// minus组件代码</span></span><br><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce3&quot;</span>&gt; -&#123;&#123;numN&#125;&#125; Async &lt;/button&gt;</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">&#x27;minusAsync&#x27;</span>])</span><br><span class=\"line\">  reduce3 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minusAsync(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"module\"><a class=\"anchor\" href=\"#module\">#</a> Module</h1>\n<p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块 —— 从上至下进行同样方式的分割：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>同样，对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// tate(局部状态),commit,roosState（根状态）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((state.count + rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">&#x27;increment&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state(局部状态),getters（全局getters对象）,roosState（根状态）</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"module-其他内容\"><a class=\"anchor\" href=\"#module-其他内容\">#</a> Module 其他内容</h2>\n<ul>\n<li>Module 其他内容 请移步官网 <span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS9tb2R1bGVzLmh0bWw=\"> modules </span></li>\n</ul>\n<hr />\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Vue",
                "Vuex"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Wechat/2021/02/18/1/",
            "url": "https://blog.mengcodes.com/Web/Wechat/2021/02/18/1/",
            "title": "微信小程序swiper高度自适应",
            "date_published": "2021-02-18T08:21:13.000Z",
            "content_html": "<p><span class=\"red\">微信小程序 swiper</span> 高度自适应<br />\n<a id=\"more\"></a><br />\n 微信小程序自带的滑块视图容器 <span class=\"kbd red\">swiper</span> 不能通过设置<span class=\"red\"> height</span> 属性使高度自适应，这就导致我们代码开发中，经常出现子组件 <span class=\"kbd red\">swiper-item</span> 高度不一样的问题，影响页面美观。可以通过下面的方法解决。</p>\n<ul>\n<li>在<span class=\"red\"> data</span> 里 声明 变量<span class=\"red\"> clientHeight</span><br />\n<figure class=\"highlight js\"><figcaption><span>方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    clientHeight: <span class=\"number\">0</span></span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>页面 <span class=\"kbd red\">swiper</span> 及  <span class=\"kbd red\">scroll-view</span> 添加高度属性<span class=\"red\"> height</span>，高度值为<span class=\"red\"> clientHeight</span><br />\n<figure class=\"highlight js\"><figcaption><span>方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\">&lt;swiper @change=<span class=\"string\">&quot;changeSwiper&quot;</span> :current=<span class=\"string\">&quot;current&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper&quot;</span> :style=<span class=\"string\">&quot;&#x27;height:&#x27; + clientHeight + &#x27;px&#x27;&quot;</span>&gt;</span><br><span class=\"line\">  &lt;swiper-item v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item, index) in tabsData&quot;</span> :key=<span class=\"string\">&quot;index&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiperItem&quot;</span>&gt;</span><br><span class=\"line\">    &lt;scroll-view scroll-y=<span class=\"string\">&quot;true&quot;</span> :style=<span class=\"string\">&quot;&#x27;height:&#x27; + clientHeight + &#x27;px&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;mainContent&quot;</span>&gt;</span><br><span class=\"line\">        ··· <span class=\"comment\">// 其他代码</span></span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/scroll-view&gt;</span><br><span class=\"line\">  &lt;/swiper-item&gt;</span><br><span class=\"line\">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure></li>\n<li><span class=\"red\">onLoad()</span> 方法中获取高度 使用 <span class=\"red\">wx.getSystemInfo()</span> 方法<br />\n <figure class=\"highlight js\"><figcaption><span>方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三步</span></span><br><span class=\"line\">onLoad () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span></span><br><span class=\"line\">  wx.getSystemInfo(&#123;</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      that.clientHeight = res.windowHeight - <span class=\"number\">44</span> <span class=\"comment\">// 减去44 是因为有 44px 的标题高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// wx.getSystemInfo() 成功时的回调如下</span></span><br><span class=\"line\"><span class=\"comment\">// 属性\t类型\t说明</span></span><br><span class=\"line\"><span class=\"comment\">// brand\tstring\t设备品牌</span></span><br><span class=\"line\"><span class=\"comment\">// model\tstring\t设备型号</span></span><br><span class=\"line\"><span class=\"comment\">// pixelRatio\tnumber\t设备像素比</span></span><br><span class=\"line\"><span class=\"comment\">// screenWidth\tnumber\t屏幕宽度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// screenHeight\tnumber\t屏幕高度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// windowWidth\tnumber\t可使用窗口宽度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// windowHeight\tnumber\t可使用窗口高度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// statusBarHeight\tnumber\t状态栏的高度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// language\tstring\t微信设置的语言</span></span><br><span class=\"line\"><span class=\"comment\">// version\tstring\t微信版本号</span></span><br><span class=\"line\"><span class=\"comment\">// system\tstring\t操作系统及版本</span></span><br><span class=\"line\"><span class=\"comment\">// platform\tstring\t客户端平台</span></span><br><span class=\"line\"><span class=\"comment\">// fontSizeSetting\tnumber\t用户字体大小（单位px）。以微信客户端「我-设置-通用-字体大小」中的设置为准</span></span><br><span class=\"line\"><span class=\"comment\">// SDKVersion\tstring\t客户端基础库版本</span></span><br><span class=\"line\"><span class=\"comment\">// benchmarkLevel\tnumber\t设备性能等级（仅Android小游戏）。取值为：-2 或 0（该设备无法运行小游戏），-1（性能未知），&gt;=1（设备性能值，该值越高，设备性能越好，目前最高不到50）</span></span><br><span class=\"line\"><span class=\"comment\">// environment\tstring\t小程序当前运行环境</span></span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "微信小程序"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Vue/2021/02/09/3/",
            "url": "https://blog.mengcodes.com/Web/Vue/2021/02/09/3/",
            "title": "一些Vue公共方法",
            "date_published": "2021-02-09T09:10:33.000Z",
            "content_html": "<p>一些 Vue 公共方法<br />\n<a id=\"more\"></a></p>\n<h1 id=\"common-functions\"><a class=\"anchor\" href=\"#common-functions\">#</a> Common Functions</h1>\n<h2 id=\"vue路由跳转\"><a class=\"anchor\" href=\"#vue路由跳转\">#</a> vue 路由跳转</h2>\n<p><figure class=\"highlight js\"><figcaption><span>方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\"><span class=\"comment\">// 方法放在common.js里</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toPage</span> (<span class=\"params\">path, query</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (query) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">      path,</span><br><span class=\"line\">      query</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">      path</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 其他代码</span></span><br><span class=\"line\">···</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"comment\">// 记得导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  toPage</span><br><span class=\"line\">  ···</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\"><span class=\"comment\">// 挂载在vue全局</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> commonFunction <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./common&#x27;</span></span><br><span class=\"line\">Vue.prototype.$toPage = commonFunction.toPage</span><br><span class=\"line\"><span class=\"comment\">// 第三步</span></span><br><span class=\"line\"><span class=\"comment\">// 页面中使用</span></span><br><span class=\"line\"><span class=\"comment\">// 无参数</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$toPage(<span class=\"string\">`/home`</span>)</span><br><span class=\"line\"><span class=\"comment\">// 有参数</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$toPage(<span class=\"string\">`/AfterLhygOrderPay/AfterLhygOrderPayQrCode/<span class=\"subst\">$&#123;code&#125;</span>/<span class=\"subst\">$&#123;currentPaymentCode&#125;</span>/<span class=\"subst\">$&#123;item.paymentType&#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"comment\">// query</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$toPage(<span class=\"string\">`/customManagement/<span class=\"subst\">$&#123;code&#125;</span>/photos`</span>, addCode)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$toPage(<span class=\"string\">`/Worker/ContractTxt`</span>, &#123; <span class=\"attr\">id</span>: item.id, <span class=\"attr\">contractCode</span>: item.contractCode, <span class=\"attr\">roleName</span>: <span class=\"built_in\">this</span>.roleName &#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"去除字符串空格\"><a class=\"anchor\" href=\"#去除字符串空格\">#</a> 去除字符串空格</h2>\n<p><figure class=\"highlight js\"><figcaption><span>示例</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 去除字符串空格 用法同上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trim</span> (<span class=\"params\">str, isGlobal = <span class=\"literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  str = str.replace(<span class=\"regexp\">/(^\\s+)|(\\s+$)/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isGlobal) str = str.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对象按某个属性排序\"><a class=\"anchor\" href=\"#对象按某个属性排序\">#</a> 对象按某个属性排序</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;金刚&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">120</span>, <span class=\"attr\">weight</span>: <span class=\"number\">180</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;哥斯拉&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">138</span>, <span class=\"attr\">weight</span>: <span class=\"number\">220</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;机械哥斯拉&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">130</span>, <span class=\"attr\">weight</span>: <span class=\"number\">190</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"comment\">// 按某个属性（数字）排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">compare</span>(<span class=\"params\">prop</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1 = a[prop]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value2 = b[prop]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1 - value2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组按某个属性（非数字）排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">prop</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1 = a?.[prop];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value2 = b?.[prop];</span><br><span class=\"line\">    <span class=\"comment\">// return (a.name + &#x27;&#x27;).localeCompare(b.name + &#x27;&#x27;)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1.localeCompare(value2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort(compare(<span class=\"string\">&#x27;height&#x27;</span>)))  <span class=\"comment\">//返回对象height从小到大正向排序</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>下面內容 更新于 2023 年 7 月 12 日</li>\n</ul>\n<h2 id=\"防抖\"><a class=\"anchor\" href=\"#防抖\">#</a> 防抖</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Function&#125;</span> <span class=\"variable\">func</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">wait</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;boolean&#125;</span> <span class=\"variable\">immediate</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;*&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout, args, context, timestamp, result</span><br><span class=\"line\">  <span class=\"keyword\">const</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 据上一次触发时间间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> last = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - timestamp</span><br><span class=\"line\">    <span class=\"comment\">// 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      timeout = <span class=\"built_in\">setTimeout</span>(later, wait - last)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        result = func.apply(context, args)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    context = <span class=\"built_in\">this</span></span><br><span class=\"line\">    timestamp = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callNow = immediate &amp;&amp; !timeout</span><br><span class=\"line\">    <span class=\"comment\">// 如果延时不存在，重新设定延时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) timeout = <span class=\"built_in\">setTimeout</span>(later, wait)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">      result = func.apply(context, args)</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用时 先引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; debounce &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 再调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handlePutOnShelves = debounce(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"节流\"><a class=\"anchor\" href=\"#节流\">#</a> 节流</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span> (<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> callback = fn</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timerId = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"comment\">// 是否是第一次执行</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> firstInvoke = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是第一次触发，直接执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstInvoke) &#123;</span><br><span class=\"line\">      callback.apply(context, args)</span><br><span class=\"line\">      firstInvoke = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果定时器已存在，直接返回。        </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timerId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timerId = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注意这里 将 clearTimeout 放到 内部来执行了</span></span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timerId)</span><br><span class=\"line\">      timerId = <span class=\"literal\">null</span></span><br><span class=\"line\">      callback.apply(context, args)</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个闭包</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> throttled</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"首字母大写\"><a class=\"anchor\" href=\"#首字母大写\">#</a> 首字母大写</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首字母大写</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/( |^)[a-z]/g</span>, <span class=\"function\"><span class=\"params\">L</span> =&gt;</span> L.toUpperCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下划线转驼峰\"><a class=\"anchor\" href=\"#下划线转驼峰\">#</a> 下划线转驼峰</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下划转驼峰</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camelCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/_[a-z]/g</span>, <span class=\"function\"><span class=\"params\">str1</span> =&gt;</span> str1.substr(-<span class=\"number\">1</span>).toUpperCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"根据身份证号码计算年龄\"><a class=\"anchor\" href=\"#根据身份证号码计算年龄\">#</a> 根据身份证号码计算年龄</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据身份证号码计算年龄</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>idCard 身份证</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns </span>返回处理后的字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeAndSexByidCard</span>(<span class=\"params\">idCard:any</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sex = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 计算性别</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idCard.substr(<span class=\"number\">16</span>, <span class=\"number\">1</span>) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        sex = <span class=\"string\">&#x27;1&#x27;</span>; <span class=\"comment\">//男</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sex = <span class=\"string\">&#x27;2&#x27;</span>; <span class=\"comment\">//女</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> birthYear = idCard.substring(<span class=\"number\">6</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> monthBirth = idCard.substring(<span class=\"number\">10</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> birthDay = idCard.substring(<span class=\"number\">12</span>, <span class=\"number\">14</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前年月日</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nowMonth = myDate.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nowDay = myDate.getDay();</span><br><span class=\"line\">    <span class=\"comment\">// 计算年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = myDate.getFullYear() - birthYear;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowMonth &lt; monthBirth || (nowMonth === monthBirth &amp;&amp; nowDay &lt; birthDay)) &#123;</span><br><span class=\"line\">        age -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;sex,age&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动态计算table高度\"><a class=\"anchor\" href=\"#动态计算table高度\">#</a> 动态计算 table 高度</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态计算table高度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>dom el-table结构的dom结构</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>num 页面除table结构之外的内容高度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>tableHeight el-table的height值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTableHeight</span>(<span class=\"params\">dom:any, num:number, tableHeight:any</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tableOffsetTop = dom.offsetTop + num</span><br><span class=\"line\">    <span class=\"keyword\">let</span> windowHeight = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">    tableHeight.value = windowHeight - tableOffsetTop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用时</span></span><br><span class=\"line\"><span class=\"comment\">// 动态设置table高度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTableHeight</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setTableHeight(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.tableOffsetTop&#x27;</span>), <span class=\"number\">80</span>, tableHeight);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"合并表格\"><a class=\"anchor\" href=\"#合并表格\">#</a> 合并表格</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从第一列开始合并，其中maxCol为从第一列开始数，要合并多少列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rowSpanFromStart</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">  nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tab = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">`print-outbound-table-<span class=\"subst\">$&#123;index&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxCol = <span class=\"number\">2</span>,</span><br><span class=\"line\">      val,</span><br><span class=\"line\">      count,</span><br><span class=\"line\">      start;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> col = maxCol - <span class=\"number\">1</span>; col &gt;= <span class=\"number\">0</span>; col--) &#123;</span><br><span class=\"line\">      count = <span class=\"number\">1</span>;</span><br><span class=\"line\">      val = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; tab.rows.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == tab.rows[i].cells[col].innerHTML) &#123;</span><br><span class=\"line\">          count++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//合并</span></span><br><span class=\"line\">            start = i - count;</span><br><span class=\"line\">            tab.rows[start].cells[col].rowSpan = count;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = start + <span class=\"number\">1</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">              tab.rows[j].cells[col].style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count = <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          val = tab.rows[i].cells[col].innerHTML;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//合并，最后几行相同的情况下</span></span><br><span class=\"line\">        start = i - count;</span><br><span class=\"line\">        tab.rows[start].cells[col].rowSpan = count;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = start + <span class=\"number\">1</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">          tab.rows[j].cells[col].style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对象数组是否重复\"><a class=\"anchor\" href=\"#对象数组是否重复\">#</a> 对象数组是否重复</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>arr 如：var arr = [&#123;name: &quot;123&quot;, age : 123&#125;, &#123;name:&quot;1234432&quot;, age : 1234324&#125;]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>key1 如：&quot;name&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>key2 如：&quot;age&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@retutns </span>boolean: true：不存在； false：存在重复</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRepeat</span>(<span class=\"params\">arr, key1, key2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i][key1] === arr[j][key1] &amp;&amp; arr[i][key2] === arr[j][key2]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用时 </span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> temp = isRepeat(list, <span class=\"string\">&#x27;materialCode&#x27;</span>, <span class=\"string\">&#x27;projectId&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"根据状态返回中文\"><a class=\"anchor\" href=\"#根据状态返回中文\">#</a> 根据状态返回中文</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据状态返回中文</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getPlanStatus = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> enumStatus = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">&#x27;已撤销&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">&#x27;待拣货&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"string\">&#x27;待出库&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">4</span>: <span class=\"string\">&#x27;已出库&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">&#x27;待回库&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">6</span>: <span class=\"string\">&#x27;已回库&#x27;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> enumStatus[val];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Vue"
            ]
        }
    ]
}