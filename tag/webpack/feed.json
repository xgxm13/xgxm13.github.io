{
    "version": "https://jsonfeed.org/version/1",
    "title": "筱何仔 • All posts by \"webpack\" tag",
    "description": "",
    "home_page_url": "https://blog.mengcodes.com",
    "items": [
        {
            "id": "https://blog.mengcodes.com/Web/Webpack/2021/12/23/1/",
            "url": "https://blog.mengcodes.com/Web/Webpack/2021/12/23/1/",
            "title": "Webpack基础",
            "date_published": "2021-12-23T08:32:30.000Z",
            "content_html": "<p>学习一下 <span class=\"red\">Webpack</span>, 顺便记录一下。<br />\n<a id=\"more\"></a></p>\n<h1 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h1>\n<ul>\n<li>本质上，<span class=\"red\">Webpack</span> 是一个用于现代 <span class=\"red\">JavaScript</span> 应用程序的 <span class=\"blue\">静态模块打包工具</span>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图 (dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。</li>\n</ul>\n<h2 id=\"入口entry\"><a class=\"anchor\" href=\"#入口entry\">#</a> 入口（entry）</h2>\n<ul>\n<li>入口起点 (entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图 (dependency graph) 的开始。默认值是 ./src/index.js，可以通过配置文件 (webpack.config.js) 修改。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"输出output\"><a class=\"anchor\" href=\"#输出output\">#</a> 输出 (output)</h2>\n<ul>\n<li>output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>) <span class=\"comment\">// 引入node.js的path模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">// 打包之后的名字</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>), <span class=\"comment\">// 打包之后的路径  注意要使用绝对路径 __dirname表示获取到当前webpack.congfig.js 的物理路径， &#x27;./dist&#x27;表示基于这个物理路径解析到当前目录下的dist</span></span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>, <span class=\"comment\">// 打包时清除上次缓存</span></span><br><span class=\"line\">    assetModuleFilename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span> <span class=\"comment\">// 静态资源打包之后路径及命名 contenthash 根据文件内容生产哈希字符串 ext 扩展名 [] webpack系统自带的默认的生产文件名的方法</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"loader加载器\"><a class=\"anchor\" href=\"#loader加载器\">#</a> loader (加载器)</h2>\n<ul>\n<li>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。loader 可以让 webpack 解析其他类型的文件，并将它们转换为有效 模块。在 webpack 的配置中，loader 有两个属性：<br />\ntest 属性，识别出哪些文件会被转换。<br />\nuse 属性，定义出在进行转换时，应该使用哪个 loader。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>) <span class=\"comment\">// 引入node.js的path模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">// 打包之后的名字</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>), <span class=\"comment\">// 打包之后的路径  注意要使用绝对路径 __dirname表示获取到当前webpack.congfig.js 的物理路径， &#x27;./dist&#x27;表示基于这个物理路径解析到当前目录下的dist</span></span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>, <span class=\"comment\">// 打包时清除上次缓存</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(css|less)$/</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;less-loader&#x27;</span>] <span class=\"comment\">// 后面先执行 逆序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"插件plugin\"><a class=\"anchor\" href=\"#插件plugin\">#</a> 插件 (plugin)</h2>\n<ul>\n<li>webpack 编译器经过加工之后生成目标文件，比如生成 js，css 文件，webpack 编译的过程需要一些工具来帮忙，这些工具就是插件。loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量等。</li>\n<li>想要使用一个插件，你只需要 require () 它，然后把它添加到 plugins 数组中。多数插件可以通过选项 (option) 自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建一个插件实例。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    assetModuleFilename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span> </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">&#x27;inline-source-map&#x27;</span>,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;./index.html&#x27;</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;app.html&#x27;</span>,</span><br><span class=\"line\">      inject: <span class=\"string\">&#x27;body&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>: <span class=\"string\">&#x27;./dist&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.png$/</span>,  <span class=\"comment\">// 正则 //  .png . 需要转化 \\.png  $ 表示以png作为拓展名的这种类型的文件</span></span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/resource&#x27;</span>,</span><br><span class=\"line\">        generator: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// filename: &#x27;images/test.png&#x27; //</span></span><br><span class=\"line\">          filename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.svg$/</span>,</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/inline&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.txt$/</span>, </span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/source&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jpg$/</span>,</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">        parser: &#123;</span><br><span class=\"line\">          dataUrlCondition: &#123;</span><br><span class=\"line\">            maxSize: <span class=\"number\">4</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"模式mode\"><a class=\"anchor\" href=\"#模式mode\">#</a> 模式 (mode)</h2>\n<ul>\n<li>通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"浏览器兼容性browser-compatibility\"><a class=\"anchor\" href=\"#浏览器兼容性browser-compatibility\">#</a> 浏览器兼容性 (browser compatibility)</h2>\n<ul>\n<li>Webpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）</li>\n</ul>\n<h2 id=\"环境environment\"><a class=\"anchor\" href=\"#环境environment\">#</a> 环境 (environment)</h2>\n<ul>\n<li>Webpack 5 运行于 Node.js v10.13.0+ 的版本。<br />\n<img data-src=\"https://s2.loli.net/2021/12/23/jh6sPfOzButMXrG.png\" alt=\"image.png\" /><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Webpack"
            ]
        }
    ]
}