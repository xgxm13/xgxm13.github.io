{
    "version": "https://jsonfeed.org/version/1",
    "title": "筱何仔 • All posts by \"js\" tag",
    "description": "",
    "home_page_url": "https://blog.mengcodes.com",
    "items": [
        {
            "id": "https://blog.mengcodes.com/Web/Js/2023/09/04/2/",
            "url": "https://blog.mengcodes.com/Web/Js/2023/09/04/2/",
            "title": "Js 检测数据类型的方法和区别",
            "date_published": "2023-09-04T10:44:35.000Z",
            "content_html": "<p>JS 的数据类型判断有 typeof ()、instanceof ()、constructor、Object.prototype.toString.call () 等方法，但是他们也有区别。<br />\n<a id=\"more\"></a></p>\n<ul>\n<li>参考 CSDN <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqeV9hbmRyb2lkX2Jsb2cvYXJ0aWNsZS9kZXRhaWxzLzgxMDIzMTc3\">zhongjunyao</span></li>\n</ul>\n<h1 id=\"typeof\"><a class=\"anchor\" href=\"#typeof\">#</a> typeof</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">2</span>);               <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>);            <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;str&#x27;</span>);           <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> []);              <span class=\"comment\">// object     数组的数据类型在 typeof 中被解释为 object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);    <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> &#123;&#125;);              <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>);       <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);            <span class=\"comment\">// object     null 的数据类型被 typeof 解释为 object</span></span><br></pre></td></tr></table></figure></p>\n<div class=\"note danger\">\n<ul>\n<li><ins class=\"primary\">数字 Number，布尔值 Boolean，字符串 String，函数 Function，对象 Object，Undefined</ins> 这一些数据类型在 typeof 下都被精准的解释，只有数组和 null 的数据类型不够精准。其实 typeof 对于数组 和 null 的类型判断是正确的，只不过不够精准而已。</li>\n</ul>\n</div>\n<h1 id=\"instanceof\"><a class=\"anchor\" href=\"#instanceof\">#</a> instanceof</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>);                    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span>);                <span class=\"comment\">// false </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;str&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>);                <span class=\"comment\">// false  </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);                    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>);       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);                   <span class=\"comment\">// true    </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> <span class=\"keyword\">instanceof</span> Undefined);         <span class=\"comment\">// Uncaught ReferenceError: Undefined is not defined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> <span class=\"keyword\">instanceof</span> Null);                   <span class=\"comment\">// Uncaught ReferenceError: Null is not defined</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>直接的字面量值判断数据类型，只有<ins class=\"primary\">引用数据类型（Array，Function，Object）</ins>被精准判断，<ins class=\"primary\">其他（数值 Number，布尔值 Boolean，字符串 String）</ins>字面值不能被 instanceof 精准判断。</li>\n<li>instanceof 在 MDN 中的解释：<ins class=\"dot\">instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</ins>其意思就是判断对象是否是某一数据类型（如 Array）的实例，请重点关注一下是判断一个<span class=\"red\">对象</span>是否是数据类型的实例。</li>\n<li>上面案例可以更改如下：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">2</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>);               <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span>);          <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;str&#x27;</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>);           <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></li>\n<li>对于 null 和 undefined</li>\n</ul>\n<div class=\"note info\">\n<ul>\n<li>浏览器认为 null，undefined 不是构造器。但是在 typeof 中你可能已经发现了，typeof null 的结果是 object，typeof undefined 的结果是 undefined ，这是怎么回事呢？</li>\n<li>尤其是 null，其实这是 js 发展过程中设计者的重大失误，早期准备更改 null 的类型为 null，由于当时已经有大量网站使用了 null，如果更改，将导致很多网站的逻辑出现漏洞问题，就没有更改过来，于是一直遗留到现在。作为学习者，我们只需要记住就好。</li>\n</ul>\n</div>\n<h1 id=\"constructor\"><a class=\"anchor\" href=\"#constructor\">#</a> constructor</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">2</span>).constructor === <span class=\"built_in\">Number</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"literal\">true</span>).constructor === <span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"string\">&#x27;str&#x27;</span>).constructor === <span class=\"built_in\">String</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(([]).constructor === <span class=\"built_in\">Array</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;).constructor === <span class=\"built_in\">Function</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((&#123;&#125;).constructor === <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>用 costructor 来判断类型看起来是完美的，然而，如果我创建一个对象，更改它的原型，这种方式也变得不可靠了。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">Fn.prototype=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> f=<span class=\"keyword\">new</span> Fn();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f.constructor===Fn);    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f.constructor===<span class=\"built_in\">Array</span>); <span class=\"comment\">// true </span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"objectprototypetostringcall\"><a class=\"anchor\" href=\"#objectprototypetostringcall\">#</a> Object.prototype.toString.call</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"number\">2</span>));               <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">true</span>));            <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"string\">&#x27;str&#x27;</span>));           <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call([]));              <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;));    <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(&#123;&#125;));              <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">undefined</span>));       <span class=\"comment\">// [object Undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">null</span>));            <span class=\"comment\">// [object Null]</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>使用 Object 对象的原型方法 toString ，使用 call 进行狸猫换太子，借用 Object 的 toString  方法，结果精准的显示我们需要的数据类型。</li>\n</ul>\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Js"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Ts/2021/12/03/1/",
            "url": "https://blog.mengcodes.com/Web/Ts/2021/12/03/1/",
            "title": "TS手册",
            "date_published": "2021-12-03T07:22:09.000Z",
            "content_html": "<p>学习一下 <span class=\"red\">TypeScript</span>, 顺便记录一下。<br />\n<a id=\"more\"></a></p>\n<h1 id=\"基础类型\"><a class=\"anchor\" href=\"#基础类型\">#</a> 基础类型</h1>\n<h2 id=\"布尔值\"><a class=\"anchor\" href=\"#布尔值\">#</a> 布尔值</h2>\n<ul>\n<li>true/false<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isDone: boolean = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h2>\n<ul>\n<li>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。这些浮点数的类型是 number。除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015 中引入的二进制和八进制字面量。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: number = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: number = <span class=\"number\">0xf00d</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryLiteral: number = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> octalLiteral: number = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<ul>\n<li>和 JavaScript 一样，可以使用双引号（&quot;）或单引号（'）表示字符串。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name: string = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>还可以使用 模板字符串。 这种字符串是被反引号包围（`），并且以 ${expr} 这种形式嵌入表达式<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name: string = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age: number = <span class=\"string\">&#x27;22&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> text: string = <span class=\"string\">`my name is &amp;&#123;name&#125;, my age is <span class=\"subst\">$&#123;age&#125;</span>;`</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<ul>\n<li>有两种方式可以定义数组。</li>\n<li>第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> list: number[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li>第二种方式是使用数组泛型，Array &lt;元素类型&gt;：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">Array</span>&lt;number&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"元组-tuple\"><a class=\"anchor\" href=\"#元组-tuple\">#</a> 元组 Tuple</h2>\n<ul>\n<li>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x: [string, number];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">22</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\">x = [<span class=\"number\">22</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>]; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h2>\n<ul>\n<li>enum 类型是对 JavaScript 标准数据类型的一个补充。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red, Green, Blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> color: Color = Color.Red;</span><br></pre></td></tr></table></figure></li>\n<li>默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 1 开始编号<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red = <span class=\"number\">1</span>, Green, Blue = <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> color: Color = Color.Red;</span><br></pre></td></tr></table></figure></li>\n<li>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red = <span class=\"number\">1</span>, Green, Blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> colorName: string = Color[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colorName); <span class=\"comment\">// Green</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"函数类型\"><a class=\"anchor\" href=\"#函数类型\">#</a> 函数类型</h2>\n<ul>\n<li>为函数定义类型。我们可以给每个参数添加类型之后再为函数本身添加返回值类型<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\">a: number,b: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 参数的个数必须要完全相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\">a: number,b?: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func2&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置可选参数必须放最后面</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2(<span class=\"number\">1</span>) <span class=\"comment\">// ok b为可选参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func3</span> (<span class=\"params\">a: number,b: number = <span class=\"number\">10</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func3&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置参数b的默认值 （设置默认值的参数必须放最后面）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func4</span> (<span class=\"params\">a: number,b: number, ...rest: number[]</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func4&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置接收任意数量的参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>使用函数表达式<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func1: <span class=\"function\">(<span class=\"params\">a: number, b: number</span>) =&gt;</span> string = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a: number, b: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"any\"><a class=\"anchor\" href=\"#any\">#</a> Any</h2>\n<ul>\n<li>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型，那么我们可以使用 any 类型来标记这些变量<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: any = <span class=\"literal\">false</span>;</span><br><span class=\"line\">a = <span class=\"string\">&#x27;zhangsan&#x27;</span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">a = <span class=\"number\">22</span>; <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure></li>\n<li>当你只知道一部分数据的类型时，any 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list: any[] = [<span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">list[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"void\"><a class=\"anchor\" href=\"#void\">#</a> Void</h2>\n<ul>\n<li>void 类型像是与 any 类型相反，它表示没有任何类型。只能赋予它 undefined 和 null。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> unusable: <span class=\"keyword\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"null-和-undefined\"><a class=\"anchor\" href=\"#null-和-undefined\">#</a> Null 和 Undefined</h2>\n<ul>\n<li>TypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。默认情况下 null 和 undefined 是所有类型的子类型。和 void 相似，它们的本身的类型用处不是很大：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n: <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"never\"><a class=\"anchor\" href=\"#never\">#</a> Never</h2>\n<ul>\n<li>never 类型表示的是那些永不存在的值的类型。</li>\n</ul>\n<h2 id=\"object\"><a class=\"anchor\" href=\"#object\">#</a> Object</h2>\n<ul>\n<li>Object 表示非原始类型，也就是除 number，string，boolean，symbol，null 或 undefined 之外的类型。</li>\n</ul>\n<h1 id=\"类型断言\"><a class=\"anchor\" href=\"#类型断言\">#</a> 类型断言</h1>\n<ul>\n<li>绕过编译器的类型推断，手动指定一个值的类型</li>\n<li>有两种方式。第一种：&lt;类型&gt; 变量<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: any = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: number = (&lt;string&gt;someValue).length;</span><br></pre></td></tr></table></figure></li>\n<li>第二种：变量 as 类型<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: any = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: number = (someValue <span class=\"keyword\">as</span> string).length;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"接口-interface\"><a class=\"anchor\" href=\"#接口-interface\">#</a> 接口  Interface</h1>\n<ul>\n<li>可以理解为一种规范，约束对象的结构。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submit</span> (<span class=\"params\">params: Params</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params.title)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params.content)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">submit(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;213&#x27;</span>,</span><br><span class=\"line\">  content: <span class=\"string\">&#x27;334&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"可选属性\"><a class=\"anchor\" href=\"#可选属性\">#</a> 可选属性</h2>\n<ul>\n<li>接口里的属性不全都是必需的。(属性名？: 类型)<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">  subTitle?: string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"只读属性\"><a class=\"anchor\" href=\"#只读属性\">#</a> 只读属性</h2>\n<ul>\n<li>一些对象属性只能在对象刚刚创建的时候修改其值。属性名之前加 readonly 来指定只读属性。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">  subTitle?: string</span><br><span class=\"line\">  readonly author: string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"动态成员\"><a class=\"anchor\" href=\"#动态成员\">#</a> 动态成员</h2>\n<ul>\n<li>有时候不知道具体的字段名，是动态的，例如 缓存<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  [key: string]: string</span><br><span class=\"line\">  <span class=\"comment\">// key不是固定的，可以用任意名称代替 如props</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Js",
                "Ts"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Js/2021/11/15/1/",
            "url": "https://blog.mengcodes.com/Web/Js/2021/11/15/1/",
            "title": "跳出forEach循环",
            "date_published": "2021-11-15T08:50:01.000Z",
            "content_html": "<p>有些业务场景需要用的 <span class=\"red\">forEach</span> 比如需要遍历复杂数据，只要出现一个满足条件的数据就终止掉整个循环。<br />\n<a id=\"more\"></a></p>\n<h2 id=\"跳出本次循环\"><a class=\"anchor\" href=\"#跳出本次循环\">#</a> 跳出本次循环</h2>\n<p><figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"跳出整体循环\"><a class=\"anchor\" href=\"#跳出整体循环\">#</a> 跳出整体循环</h2>\n<ul>\n<li><span class=\"red\">forEach</span> 无法通过正常流程 (如 <span class=\"red\">break</span>) 终止循环，但可通过抛出异常的方式实现终止循环<br />\n <figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;终止循环&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 打印如图：<br />\n<img data-src=\"https://i.loli.net/2021/11/15/piuhXeOL7kIWs2f.png\" alt=\"image.png\" /><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Js"
            ]
        }
    ]
}