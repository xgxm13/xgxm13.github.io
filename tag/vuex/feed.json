{
    "version": "https://jsonfeed.org/version/1",
    "title": "筱何仔 • All posts by \"vuex\" tag",
    "description": "",
    "home_page_url": "https://blog.mengcodes.com",
    "items": [
        {
            "id": "https://blog.mengcodes.com/Web/Vue/2021/02/22/1/",
            "url": "https://blog.mengcodes.com/Web/Vue/2021/02/22/1/",
            "title": "Vuex入门及使用",
            "date_published": "2021-02-22T07:54:46.000Z",
            "content_html": "<p>一个小例子掌握 Vuex 入门知识<br />\n<a id=\"more\"></a></p>\n<p>自己也是通过学习视频才了解的，前排感谢 B 站 up 主 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWg3NDExTjdiZz9wPTE=\"> 云繁 EST </span></p>\n<h1 id=\"vuex概述\"><a class=\"anchor\" href=\"#vuex概述\">#</a> Vuex 概述</h1>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。Vuex 是实现组件全局状态（数据）管理的一种机制，可以方便地实现组件之间数据的共享。</p>\n<h1 id=\"vuex的基本使用\"><a class=\"anchor\" href=\"#vuex的基本使用\">#</a> Vuex 的基本使用</h1>\n<h2 id=\"1安装vuex依赖包\"><a class=\"anchor\" href=\"#1安装vuex依赖包\">#</a> 1. 安装 vuex 依赖包</h2>\n<p><figure class=\"highlight js\"><figcaption><span>安装vuex依赖包</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuex --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2导入vuex包\"><a class=\"anchor\" href=\"#2导入vuex包\">#</a> 2. 导入 Vuex 包</h2>\n<p><figure class=\"highlight js\"><figcaption><span>导入</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3创建store对象\"><a class=\"anchor\" href=\"#3创建store对象\">#</a> 3. 创建 store 对象</h2>\n<p><figure class=\"highlight js\"><figcaption><span>创建store对象</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// state 中存放的就是全局共享的数据</span></span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4将store对象挂载到-vue-实例中\"><a class=\"anchor\" href=\"#4将store对象挂载到-vue-实例中\">#</a> 4. 将 store 对象挂载到 vue 实例中</h2>\n<p><figure class=\"highlight js\"><figcaption><span>将store对象挂载到 vue 实例中</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  <span class=\"comment\">// 将创建的共享数据对象，挂载到Vue实例中</span></span><br><span class=\"line\">  <span class=\"comment\">// 所有组件中，都可以直接从 store 中获取全局的数据</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><br />\n 我们可以通过一个小例子来熟悉 vuex 的用法：<span class=\"blue\">父组件 App.vue 上引入两个子组件，一个加法操作的 add.vue 子组件，一个减法操作的 minus.vue 子组件。父组件引入并渲染 Vuex 中的 全局共享的数据 count，通过加减法的运算来了解 count 发生的变化。</span></p>\n<ul>\n<li>我们把两个组件分隔开 准备工作完成后的 App.vue 代码如下：<br />\n<figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;Add&gt;&lt;/Add&gt;</span><br><span class=\"line\">    &lt;p&gt;--------------------------&lt;/p&gt;</span><br><span class=\"line\">    &lt;Minus&gt;&lt;/Minus&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Add <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/add&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Minus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/minus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Add,</span><br><span class=\"line\">    Minus</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"state\"><a class=\"anchor\" href=\"#state\">#</a> State</h1>\n<p>State 提供唯一的公共数据源，所有共享的数据都要统一放到 Store 的 State 中进行存储。</p>\n<ul>\n<li>我们需要在 add 和 minus 组件中 都能访问到 当前最新的 count 值 有如下两种方式</li>\n</ul>\n<h2 id=\"方法一thisstorestate全局数据名称\"><a class=\"anchor\" href=\"#方法一thisstorestate全局数据名称\">#</a> 方法一：this.$store.state. 全局数据名称</h2>\n<ul>\n<li>在 add 组件中的代码<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;当前count值为：&#123;&#123;$store.state.count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"方法二1从vuex中按需引入-mapstate-对象-2将全局数据映射为当前组件的计算属性\"><a class=\"anchor\" href=\"#方法二1从vuex中按需引入-mapstate-对象-2将全局数据映射为当前组件的计算属性\">#</a> 方法二：①从 vuex 中按需引入 mapState 对象 ②将全局数据映射为当前组件的计算属性</h2>\n<ul>\n<li>在 minus 组件中的代码<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从vuex中按需引入 mapState 对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 将全局数据映射为当前组件的计算属性</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState([<span class=\"string\">&#x27;count&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\">&lt;h3&gt;当前count值为：&#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"getter\"><a class=\"anchor\" href=\"#getter\">#</a> Getter</h1>\n<p>Getter 用于对 Store 中的数据进行加工处理形成新的数据<br />\n① Getter 可以对 Store 中已经存在的数据加工处理形成新的数据，类似 Vue 的计算属性<br />\n② Store 中数据发生变化，Getter 的数据也会跟着变化</p>\n<ul>\n<li>我们可以在 store 的 state 中新加一个 doubleCount 返回当前 count 数值的 2 倍<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`看我翻倍----  <span class=\"subst\">$&#123;state.count * <span class=\"number\">2</span>&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>Getter 相当于计算属性，使用方法与 state 中的数据一样<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在add组件中的代码</span></span><br><span class=\"line\">&lt;h3&gt;当前doubleCount值为：&#123;&#123;$store.state.doubleCount&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\"><span class=\"comment\">// 在minus组件中的代码</span></span><br><span class=\"line\"><span class=\"comment\">// 从vuex中按需引入 mapGetters 对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 将全局数据映射为当前组件的计算属性</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">&#x27;doubleCount&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"mutation\"><a class=\"anchor\" href=\"#mutation\">#</a> Mutation</h1>\n<p>Mutation 用于变更 Store 中的数据<br />\n① 只能通过 Mutation 变更 Store 中的数据，不可以直接操作 Store 中的数据<br />\n② 通过这种方式虽然操作稍微繁琐，但是可以集中监控所有公共数据的变化<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store 目录下的 index.js 定义 Mutation</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收的参数 一个是 store里面的state，另一个是我们传的其他数据</span></span><br><span class=\"line\">    add (state, step) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果无参数</span></span><br><span class=\"line\">      step ? state.count += step : state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minus (state, step) &#123;</span><br><span class=\"line\">      step ? state.count -= step : state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>我们可以在 add 组件和 minus 组件中添加按钮，动态改变 State 中 count 的值，有以下两种方式</li>\n</ul>\n<h2 id=\"方法一-thisstorecommit方法名称-其他参数\"><a class=\"anchor\" href=\"#方法一-thisstorecommit方法名称-其他参数\">#</a> 方法一: this.$store.commit (' 方法名称 ', 其他参数)</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add组件代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add1&quot;</span>&gt; +<span class=\"number\">1</span> &lt;/button&gt;</span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add2&quot;</span>&gt; +N &lt;/button&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  add1 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  add2 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"built_in\">this</span>.numN)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二1从vuex中按需引入-mapmutations-函数-2将需要的-mutations-函数映射为当前组件的-methods-方法\"><a class=\"anchor\" href=\"#方法二1从vuex中按需引入-mapmutations-函数-2将需要的-mutations-函数映射为当前组件的-methods-方法\">#</a> 方法二：①从 vuex 中按需引入 mapMutations 函数 ②将需要的 mutations 函数，映射为当前组件的 methods 方法</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// minus组件代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce1&quot;</span>&gt; -<span class=\"number\">1</span> &lt;/button&gt;</span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce2&quot;</span>&gt; -N &lt;/button&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapMutations([<span class=\"string\">&#x27;minus&#x27;</span>]),</span><br><span class=\"line\">  reduce1 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minus()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reduce2 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minus(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"action\"><a class=\"anchor\" href=\"#action\">#</a> Action</h1>\n<p>Action 用于处理异步任务。<br />\n如果通过异步操作变更数据，必须通过 Action，而不能使用 Mutation，但是在 Action 中还是要通过触发 Mutation 的方式间接变更数据。</p>\n<ul>\n<li>我们可以在 store 目录下的 index.js 中声明两个 异步方法 addAsync 和 minusAsync<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    add (state, step) &#123;</span><br><span class=\"line\">      step ? state.count += step : state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minus (state, step) &#123;</span><br><span class=\"line\">      step ? state.count -= step : state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    addAsync (context, step) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;add&#x27;</span>, step)</span><br><span class=\"line\">      &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minusAsync (context, step) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;minus&#x27;</span>, step)</span><br><span class=\"line\">      &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>触发 Action 函数的两种方式</li>\n</ul>\n<h2 id=\"方法一thisstoredispatch方法名称-其他参数\"><a class=\"anchor\" href=\"#方法一thisstoredispatch方法名称-其他参数\">#</a> 方法一：this.$store.dispatch (' 方法名称 ', 其他参数)</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add组件代码</span></span><br><span class=\"line\"><span class=\"comment\">// 页面</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add3&quot;</span>&gt; +N Async &lt;/button&gt;</span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  add3 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二1从-vuex-中按需引入-mapactons-函数-2将指定的-actions-函数映射为当前组件的-methods-函数\"><a class=\"anchor\" href=\"#方法二1从-vuex-中按需引入-mapactons-函数-2将指定的-actions-函数映射为当前组件的-methods-函数\">#</a> 方法二：①从 vuex 中按需引入 mapActons 函数 ②将指定的 actions 函数，映射为当前组件的 methods 函数</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// minus组件代码</span></span><br><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce3&quot;</span>&gt; -&#123;&#123;numN&#125;&#125; Async &lt;/button&gt;</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">&#x27;minusAsync&#x27;</span>])</span><br><span class=\"line\">  reduce3 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minusAsync(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"module\"><a class=\"anchor\" href=\"#module\">#</a> Module</h1>\n<p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块 —— 从上至下进行同样方式的分割：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>同样，对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// tate(局部状态),commit,roosState（根状态）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((state.count + rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">&#x27;increment&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state(局部状态),getters（全局getters对象）,roosState（根状态）</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"module-其他内容\"><a class=\"anchor\" href=\"#module-其他内容\">#</a> Module 其他内容</h2>\n<ul>\n<li>Module 其他内容 请移步官网 <span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS9tb2R1bGVzLmh0bWw=\"> modules </span></li>\n</ul>\n<hr />\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Vue",
                "Vuex"
            ]
        }
    ]
}