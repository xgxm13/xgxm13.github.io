{
    "version": "https://jsonfeed.org/version/1",
    "title": "筱何仔 • All posts by \"js\" category",
    "description": "",
    "home_page_url": "https://blog.mengcodes.com",
    "items": [
        {
            "id": "https://blog.mengcodes.com/Web/Js/2023/09/04/2/",
            "url": "https://blog.mengcodes.com/Web/Js/2023/09/04/2/",
            "title": "Js 检测数据类型的方法和区别",
            "date_published": "2023-09-04T10:44:35.000Z",
            "content_html": "<p>JS 的数据类型判断有 typeof ()、instanceof ()、constructor、Object.prototype.toString.call () 等方法，但是他们也有区别。<br />\n<a id=\"more\"></a></p>\n<ul>\n<li>参考 CSDN <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqeV9hbmRyb2lkX2Jsb2cvYXJ0aWNsZS9kZXRhaWxzLzgxMDIzMTc3\">zhongjunyao</span></li>\n</ul>\n<h1 id=\"typeof\"><a class=\"anchor\" href=\"#typeof\">#</a> typeof</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">2</span>);               <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>);            <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;str&#x27;</span>);           <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> []);              <span class=\"comment\">// object     数组的数据类型在 typeof 中被解释为 object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);    <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> &#123;&#125;);              <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>);       <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);            <span class=\"comment\">// object     null 的数据类型被 typeof 解释为 object</span></span><br></pre></td></tr></table></figure></p>\n<div class=\"note danger\">\n<ul>\n<li><ins class=\"primary\">数字 Number，布尔值 Boolean，字符串 String，函数 Function，对象 Object，Undefined</ins> 这一些数据类型在 typeof 下都被精准的解释，只有数组和 null 的数据类型不够精准。其实 typeof 对于数组 和 null 的类型判断是正确的，只不过不够精准而已。</li>\n</ul>\n</div>\n<h1 id=\"instanceof\"><a class=\"anchor\" href=\"#instanceof\">#</a> instanceof</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>);                    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span>);                <span class=\"comment\">// false </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;str&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>);                <span class=\"comment\">// false  </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);                    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>);       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);                   <span class=\"comment\">// true    </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> <span class=\"keyword\">instanceof</span> Undefined);         <span class=\"comment\">// Uncaught ReferenceError: Undefined is not defined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> <span class=\"keyword\">instanceof</span> Null);                   <span class=\"comment\">// Uncaught ReferenceError: Null is not defined</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>直接的字面量值判断数据类型，只有<ins class=\"primary\">引用数据类型（Array，Function，Object）</ins>被精准判断，<ins class=\"primary\">其他（数值 Number，布尔值 Boolean，字符串 String）</ins>字面值不能被 instanceof 精准判断。</li>\n<li>instanceof 在 MDN 中的解释：<ins class=\"dot\">instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</ins>其意思就是判断对象是否是某一数据类型（如 Array）的实例，请重点关注一下是判断一个<span class=\"red\">对象</span>是否是数据类型的实例。</li>\n<li>上面案例可以更改如下：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">2</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>);               <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span>);          <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;str&#x27;</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>);           <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></li>\n<li>对于 null 和 undefined</li>\n</ul>\n<div class=\"note info\">\n<ul>\n<li>浏览器认为 null，undefined 不是构造器。但是在 typeof 中你可能已经发现了，typeof null 的结果是 object，typeof undefined 的结果是 undefined ，这是怎么回事呢？</li>\n<li>尤其是 null，其实这是 js 发展过程中设计者的重大失误，早期准备更改 null 的类型为 null，由于当时已经有大量网站使用了 null，如果更改，将导致很多网站的逻辑出现漏洞问题，就没有更改过来，于是一直遗留到现在。作为学习者，我们只需要记住就好。</li>\n</ul>\n</div>\n<h1 id=\"constructor\"><a class=\"anchor\" href=\"#constructor\">#</a> constructor</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">2</span>).constructor === <span class=\"built_in\">Number</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"literal\">true</span>).constructor === <span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"string\">&#x27;str&#x27;</span>).constructor === <span class=\"built_in\">String</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(([]).constructor === <span class=\"built_in\">Array</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;).constructor === <span class=\"built_in\">Function</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((&#123;&#125;).constructor === <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>用 costructor 来判断类型看起来是完美的，然而，如果我创建一个对象，更改它的原型，这种方式也变得不可靠了。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">Fn.prototype=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> f=<span class=\"keyword\">new</span> Fn();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f.constructor===Fn);    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f.constructor===<span class=\"built_in\">Array</span>); <span class=\"comment\">// true </span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"objectprototypetostringcall\"><a class=\"anchor\" href=\"#objectprototypetostringcall\">#</a> Object.prototype.toString.call</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"number\">2</span>));               <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">true</span>));            <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"string\">&#x27;str&#x27;</span>));           <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call([]));              <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;));    <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(&#123;&#125;));              <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">undefined</span>));       <span class=\"comment\">// [object Undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.call(<span class=\"literal\">null</span>));            <span class=\"comment\">// [object Null]</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>使用 Object 对象的原型方法 toString ，使用 call 进行狸猫换太子，借用 Object 的 toString  方法，结果精准的显示我们需要的数据类型。</li>\n</ul>\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Js"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Js/2021/11/16/1/",
            "url": "https://blog.mengcodes.com/Web/Js/2021/11/16/1/",
            "title": "请求动画帧 requestAnimationFrame",
            "date_published": "2021-11-16T09:13:34.000Z",
            "content_html": "<p>项目中遇到用 <span class=\"blue\">setInterval</span> 写的滚动的看板，在低配置的电视上比较卡顿， 同事推荐了 <span class=\"blue\">请求动画帧</span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dpbmRvdy9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU=\">requestAnimationFrame</span><br />\n<a id=\"more\"></a></p>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p><span class=\"red\">window.requestAnimationFrame()</span> 告诉浏览器 —— 你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p>\n<ul>\n<li>注意：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用<span class=\"red\"> window.requestAnimationFrame ()</span></li>\n</ul>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><span class=\"red\">window.requestAnimationFrame(callback);</span></p>\n<h2 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h2>\n<p><span class=\"blue\">callback</span><br />\n 下一次重绘之前更新动画帧所调用的函数 (即上面所说的回调函数)。该回调函数会被传入 <span class=\"blue\">DOMHighResTimeStamp</span> 参数，该参数与<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1BlcmZvcm1hbmNlL25vdw==\"> performance.now ()</span> 的返回值相同，它表示<span class=\"blue\"> requestAnimationFrame ()</span> 开始去执行回调函数的时刻。</p>\n<ul>\n<li><span class=\"blue\">requestAnimationFrame()</span> 方法返回一个精确到毫秒的 <span class=\"blue\">DOMHighResTimeStamp</span> 。</li>\n</ul>\n<h2 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h2>\n<p>一个 long 整数，请求 ID ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 <span class=\"blue\">window.cancelAnimationFrame()</span> 以取消回调函数。</p>\n<h2 id=\"滚动例子\"><a class=\"anchor\" href=\"#滚动例子\">#</a> 滚动例子</h2>\n<p><figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">&lt;div id=<span class=\"string\">&#x27;scroll&#x27;</span>&gt;</span><br><span class=\"line\">  <span class=\"comment\">// ... 循环的代码</span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"comment\">// css</span></span><br><span class=\"line\">#scroll &#123;</span><br><span class=\"line\">  height: 200px</span><br><span class=\"line\">  overflow: auto </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> scroll = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;scroll&#x27;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  scroll.scrollTop = scroll.scrollTop + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (scroll.scrollTop &gt;= scroll.scrollHeight - scroll.offsetHeight) &#123;</span><br><span class=\"line\">    scroll.scrollTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  requestAnimationFrame(scroll);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scroll();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"自定义时间间隔\"><a class=\"anchor\" href=\"#自定义时间间隔\">#</a> 自定义时间间隔</h2>\n<ul>\n<li>如果我想自己设定一个时间，不让跟着屏幕刷新率来，如何操作？</li>\n<li>利用固定的时间差 参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mYTU1MTJkZmI0ZjU=\">简书：我是一个前端的博客</span><br />\n <figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> scroll = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;scroll&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//当前执行时间</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nowTime = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//记录每次动画执行结束的时间</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> lastTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"comment\">//我们自己定义的动画时间差值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> diffTime = <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//记录当前时间</span></span><br><span class=\"line\">  nowTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"comment\">// 当前时间-上次执行时间如果大于diffTime，那么执行动画，并更新上次执行时间</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(nowTime-lastTime &gt; diffTime)&#123;</span><br><span class=\"line\">      lastTime = nowTime</span><br><span class=\"line\">      scroll.scrollTop = scroll.scrollTop + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (scroll.scrollTop &gt;= scroll.scrollHeight - scroll.offsetHeight) &#123;</span><br><span class=\"line\">        scroll.scrollTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  requestAnimationFrame(scroll);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scroll();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>与 <span class=\"blue\">setTimeout</span> 和 <span class=\"blue\">setInterval</span> 不同，<span class=\"blue\">requestAnimationFrame</span> 不需要设置时间间隔，是根据浏览器屏幕刷新次数来的，一般来说，这个频率为每秒 60 帧，如果要设置间隔，参考上文方法。体验来讲，确实比较流畅，特别是低配置车间电视上。</li>\n<li>在大多数浏览器里，当 <span class=\"blue\">requestAnimationFrame()</span> 运行在后台标签页或者隐藏的 <span class=\"blue\">&lt;iframe&gt;</span> 里时，<span class=\"blue\">requestAnimationFrame()</span> 会被暂停调用以提升性能和电池寿命。</li>\n<li>存在兼容问题，其他浏览器需要加前缀。</li>\n</ul>\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": []
        },
        {
            "id": "https://blog.mengcodes.com/Web/Js/2021/11/15/1/",
            "url": "https://blog.mengcodes.com/Web/Js/2021/11/15/1/",
            "title": "跳出forEach循环",
            "date_published": "2021-11-15T08:50:01.000Z",
            "content_html": "<p>有些业务场景需要用的 <span class=\"red\">forEach</span> 比如需要遍历复杂数据，只要出现一个满足条件的数据就终止掉整个循环。<br />\n<a id=\"more\"></a></p>\n<h2 id=\"跳出本次循环\"><a class=\"anchor\" href=\"#跳出本次循环\">#</a> 跳出本次循环</h2>\n<p><figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"跳出整体循环\"><a class=\"anchor\" href=\"#跳出整体循环\">#</a> 跳出整体循环</h2>\n<ul>\n<li><span class=\"red\">forEach</span> 无法通过正常流程 (如 <span class=\"red\">break</span>) 终止循环，但可通过抛出异常的方式实现终止循环<br />\n <figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;终止循环&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 打印如图：<br />\n<img data-src=\"https://i.loli.net/2021/11/15/piuhXeOL7kIWs2f.png\" alt=\"image.png\" /><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Js"
            ]
        }
    ]
}