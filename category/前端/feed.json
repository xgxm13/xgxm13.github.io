{
    "version": "https://jsonfeed.org/version/1",
    "title": "筱何仔 • All posts by \"前端\" category",
    "description": "",
    "home_page_url": "https://blog.mengcodes.com",
    "items": [
        {
            "id": "https://blog.mengcodes.com/Web/Css/2023/09/04/1/",
            "url": "https://blog.mengcodes.com/Web/Css/2023/09/04/1/",
            "title": "Css 预处理语言Sass、Less、Stylus区别",
            "date_published": "2023-09-04T08:15:39.000Z",
            "content_html": "<ul>\n<li>CSS 预处理器框架，分别是 Sass、Less 、Stylus。CSS 预处理器为 CSS 提供了更多的更加灵活的可编程性。增加了变量、嵌套、运算、混入 (Mixin)、继承、颜色处理、函数等特性。<br />\n<a id=\"more\"></a><br />\n 参考 CSDN <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTA4OTkyOC9hcnRpY2xlL2RldGFpbHMvODgzNzk1NjQ=\">吴小花的博客</span></li>\n</ul>\n<h1 id=\"背景介绍\"><a class=\"anchor\" href=\"#背景介绍\">#</a> 背景介绍</h1>\n<ul>\n<li><span class=\"red\">Sass：</span>2007 年诞生，最早也是最成熟的 CSS 预处理器，拥有 ruby 社区的支持和 compass 这一最强大的 css 框架。目前受 LESS 影响，已经进化到了全面兼容 CSS 的 SCSS（SCSS 需要使用分号和花括号而不是换行和缩进）。</li>\n<li><span class=\"red\">Less：</span>2009 年出现，受 SASS 的影响较大，但又使用 CSS 的语法，让大部分开发者和设计师更容易上手，在 ruby 社区之外支持者远超过 SASS。其缺点是比起 SASS 来，可编程功能不够。不过优点是简单和兼容 CSS，反过来也影响了 SASS 演变到了 SCSS 的时代，著名的 Twitter Bootstrap 就是采用 LESS 做底层语言的</li>\n<li><span class=\"red\">Stylus：</span>2010 年产生，来自 Node.js 社区。主要用来给 Node 项目进行 CSS 预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如 SASS 和 LESS。</li>\n</ul>\n<h1 id=\"语法区别\"><a class=\"anchor\" href=\"#语法区别\">#</a> 语法区别</h1>\n<ul>\n<li>Sass 和 Less 都使用的是标准的 CSS 语法， Sass 同时也支持老的语法，就是不包含花括号和分号的方式。</li>\n<li>Stylus 支持的语法要更多样性一点，它默认使用 .styl 的文件扩展名<br />\n下面是 Stylus 支持的语法：<br />\n<figure class=\"highlight\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* style.styl */</span></span><br><span class=\"line\">h1 &#123;</span><br><span class=\"line\">  color: #0982C1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* omit brackets */</span></span><br><span class=\"line\">h1</span><br><span class=\"line\">  color: #0982C1;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* omit colons and semi-colons */</span></span><br><span class=\"line\">h1</span><br><span class=\"line\">  color #0982C1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"变量的定义\"><a class=\"anchor\" href=\"#变量的定义\">#</a> 变量的定义</h1>\n<ul>\n<li>Sass 的变量必须是 $ 开始，然后变量名和值使用冒号隔开，跟 CSS 的属性一致：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">$mainColor: #0982c1;</span><br><span class=\"line\"><span class=\"comment\">//使用：</span></span><br><span class=\"line\">color: $mainColor;</span><br></pre></td></tr></table></figure></li>\n<li>Less 的变量名使用 @ 符号开始：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">@mainColor: #0982c1;</span><br><span class=\"line\"><span class=\"comment\">//使用：</span></span><br><span class=\"line\">color: @mainColor;</span><br></pre></td></tr></table></figure></li>\n<li>Stylus 对变量名没有任何限定，你可以是 $ 开始，也可以是任意的字符 (在 Stylus 的变量名不要用 @ 开头)，而且与变量值之间可以用冒号、空格隔开<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">mainColor = #0982c1</span><br><span class=\"line\">$mainColor = #0982c1</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">color mainColor</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"嵌套\"><a class=\"anchor\" href=\"#嵌套\">#</a> 嵌套</h1>\n<p>Sass、Less、Stylus 都可以嵌套</p>\n<h1 id=\"mixins混入\"><a class=\"anchor\" href=\"#mixins混入\">#</a> mixins 混入</h1>\n<ul>\n<li>Sass 的混入语法<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">@mixin <span class=\"function\"><span class=\"title\">error</span>(<span class=\"params\">$borderWidth: 2px</span>)</span> &#123;</span><br><span class=\"line\">  border: $borderWidth solid #F00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用 </span></span><br><span class=\"line\">@ include error(); </span><br><span class=\"line\"> </span><br><span class=\"line\">@ include error(5px); </span><br></pre></td></tr></table></figure></li>\n<li>Less 的混入语法<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">.error(@borderWidth: 2px) &#123;</span><br><span class=\"line\">  border: @borderWidth solid #F00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//引用</span></span><br><span class=\"line\">.error(); </span><br><span class=\"line\"> </span><br><span class=\"line\">.error(5px); </span><br></pre></td></tr></table></figure></li>\n<li>Stylus 的混入语法<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">error</span>(<span class=\"params\">borderWidth= 2px</span>)</span> &#123;</span><br><span class=\"line\">  border: borderWidth solid #F00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">  error(); </span><br><span class=\"line\"> </span><br><span class=\"line\">  error(5px); </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h1>\n<ul>\n<li>在 Sass 和 Stylus 我们可以这样写：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.block &#123;</span><br><span class=\"line\">  padding: 2px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  @extend .block; <span class=\"comment\">/* Inherit styles from &#x27;.block&#x27; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>less 写法<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.block &#123;</span><br><span class=\"line\">  padding: 2px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  .block; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"导入-import\"><a class=\"anchor\" href=\"#导入-import\">#</a> 导入 import</h1>\n<ul>\n<li>导入需要多次的 HTTP 请求。但是在 CSS 预处理器中的导入操作则不同，它只是在语义上包含了不同的文件，但最终结果是一个单一的 CSS 文件，如果你是通过 @ import &quot;file.css&quot;; 导入 CSS 文件，那效果跟普通的 CSS 导入一样。</li>\n<li>注意：导入文件中定义的混入、变量等信息也将会被引入到主样式文件中，因此需要避免它们互相冲突。</li>\n</ul>\n<p>reset.css:</p>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* file.&#123;type&#125; */</span></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: #EEE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL21haW4ueHh4\">main.xxx</span><br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@ <span class=\"keyword\">import</span> <span class=\"string\">&quot;reset.css&quot;</span>;</span><br><span class=\"line\">@ <span class=\"keyword\">import</span> <span class=\"string\">&quot;file.&#123;type&#125;&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  background: #0982C1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 最终生成的 CSS:<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ <span class=\"keyword\">import</span> <span class=\"string\">&quot;reset.css&quot;</span>;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: #EEE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  background: #0982C1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"颜色函数\"><a class=\"anchor\" href=\"#颜色函数\">#</a> 颜色函数</h1>\n<p>CSS 预处理器一般都会内置一些颜色处理函数用来对颜色值进行处理，例如加亮、变暗、颜色梯度等。</p>\n<ul>\n<li>Sass<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighten($color, <span class=\"number\">10</span>%); <span class=\"comment\">/* 比$color更亮10% */</span></span><br><span class=\"line\">darken($color, <span class=\"number\">10</span>%);  <span class=\"comment\">/* 更黑 */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">saturate($color, <span class=\"number\">10</span>%);   <span class=\"comment\">/* returns a color 10% more saturated 饱和的 深的;浓的 than $color */</span></span><br><span class=\"line\">desaturate($color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% less saturated than $color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">grayscale($color);  <span class=\"comment\">/* returns grayscale 灰度 of $color */</span></span><br><span class=\"line\">complement($color); <span class=\"comment\">/* returns complement 补足 color of $color */</span></span><br><span class=\"line\">invert($color);     <span class=\"comment\">/* returns inverted 反向的，倒转的，颠倒的 color of $color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mix($color1, $color2, <span class=\"number\">50</span>%); <span class=\"comment\">/* mix $color1 with $color2 with a weight of 50% */</span></span><br></pre></td></tr></table></figure></li>\n<li>Less<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighten(@color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% lighter than @color */</span></span><br><span class=\"line\">darken(@color, <span class=\"number\">10</span>%);  <span class=\"comment\">/* returns a color 10% darker than @color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">saturate(@color, <span class=\"number\">10</span>%);   <span class=\"comment\">/* returns a color 10% more saturated than @color */</span></span><br><span class=\"line\">desaturate(@color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% less saturated than @color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">spin(@color, <span class=\"number\">10</span>);  <span class=\"comment\">/* returns a color with a 10 degree larger in hue than @color */</span></span><br><span class=\"line\">spin(@color, -<span class=\"number\">10</span>); <span class=\"comment\">/* returns a color with a 10 degree smaller hue than @color */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mix(@color1, @color2); <span class=\"comment\">/* return a mix of @color1 and @color2 */</span></span><br></pre></td></tr></table></figure></li>\n<li>Stylus<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighten(color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% lighter than &#x27;color&#x27; */</span></span><br><span class=\"line\">darken(color, <span class=\"number\">10</span>%);  <span class=\"comment\">/* returns a color 10% darker than &#x27;color&#x27; */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">saturate(color, <span class=\"number\">10</span>%);   <span class=\"comment\">/* returns a color 10% more saturated than &#x27;color&#x27; */</span></span><br><span class=\"line\">desaturate(color, <span class=\"number\">10</span>%); <span class=\"comment\">/* returns a color 10% less saturated than &#x27;color&#x27; */</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<ul>\n<li>可以直接在 CSS 预处理器中进行样式的计算<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  margin: (14px/<span class=\"number\">2</span>);</span><br><span class=\"line\">  top: 50px + 100px;</span><br><span class=\"line\">  right: 100px - 50px;</span><br><span class=\"line\">  left: <span class=\"number\">10</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "CSS"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/2023/07/12/1/",
            "url": "https://blog.mengcodes.com/Web/2023/07/12/1/",
            "title": "JS宏任务和微任务",
            "date_published": "2023-07-12T09:46:41.000Z",
            "content_html": "<p>JS 宏任务和微任务</p>\n<ul>\n<li>前排感谢 CSDN 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yc3poYW5nMTExL2FydGljbGUvZGV0YWlscy8xMjY4NjE2Njk=\"> 奔波儿灞... </span><br />\n<a id=\"more\"></a></li>\n</ul>\n<h1 id=\"什么是微任务和宏任务\"><a class=\"anchor\" href=\"#什么是微任务和宏任务\">#</a> 什么是微任务和宏任务</h1>\n<ul>\n<li>首先，我们要先了解下 Js 。Js 是一种单线程语言，简单的说就是：只有一条通道，那么在任务多的情况下，就会出现拥挤的情况，这种情况下就产生了 ‘多线程’ ，但是这种 “多线程” 是通过单线程模仿的，也就是假的。那么就产生了同步任务和异步任务。</li>\n</ul>\n<h1 id=\"js为什么要区分微任务和宏任务\"><a class=\"anchor\" href=\"#js为什么要区分微任务和宏任务\">#</a> JS 为什么要区分微任务和宏任务</h1>\n<ul>\n<li>（1）js 是单线程的，但是分同步异步</li>\n<li>（2）微任务和宏任务皆为异步任务，它们都属于一个队列</li>\n<li>（3）宏任务一般是：script、setTimeout、setInterval、postMessage、MessageChannel、setImmediate (Node.js 环境)</li>\n<li>（4）微任务：Promise.then、Object.observe、MutationObserver、process.nextTick (Node.js 环境)</li>\n<li>（5）先执行同步再执行异步，异步遇到微任务，先执行微任务，执行完后如果没有微任务，就执行下一个宏任务，如果有微任务，就按顺序一个一个执行微任务</li>\n</ul>\n<h1 id=\"微任务和宏任务有哪些\"><a class=\"anchor\" href=\"#微任务和宏任务有哪些\">#</a> 微任务和宏任务有哪些</h1>\n<ul>\n<li>\n<p>（1）宏任务一般是：script、setTimeout、setInterval、postMessage、MessageChannel、setImmediate (Node.js 环境)</p>\n</li>\n<li>\n<p>（2）微任务：Promise.then、Object.observe、MutationObserver、process.nextTick (Node.js 环境)</p>\n</li>\n</ul>\n<h1 id=\"微任务和宏任务是怎么执行的\"><a class=\"anchor\" href=\"#微任务和宏任务是怎么执行的\">#</a> 微任务和宏任务是怎么执行的？</h1>\n<ul>\n<li>执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。</li>\n</ul>\n<p>这里容易产生一个错误的认识：就是微任务先于宏任务执行。实际上是先执行同步任务然后在执行异步任务，异步任务是分宏任务和微任务两种的。</p>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<h2 id=\"例1\"><a class=\"anchor\" href=\"#例1\">#</a> 例 1</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;\t\t    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;\t\t    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;); \t\t</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">2 5 3 4 1</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到setTimout，异步宏任务，放入宏任务队列中\n2.遇到new Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出2\n3.Promise.then，异步微任务，将其放入微任务队列中\n4.遇到同步任务console.log(5);输出5；主线程中同步任务执行完\n5.从微任务队列中取出任务到主线程中，输出3、 4，微任务队列为空\n6.从宏任务队列中取出任务到主线程中，输出1，宏任务队列为空\n</code></pre>\n</div>\n<h2 id=\"例2\"><a class=\"anchor\" href=\"#例2\">#</a> 例 2</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span>&#123;</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;).then( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;before timeout&#x27;</span>);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;also before timeout&#x27;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//1，2，3，before timeout，also before timeout，4，test;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">1，2，3，before timeout，also before timeout，4，test</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到setTimeout，异步宏任务，将() =&gt; &#123;console.log(4)&#125;放入宏任务队列中；\n2.遇到new Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出1；\n3.而Promise.then，异步微任务，将其放入微任务队列中\n4.遇到同步任务console.log(2)，输出2；主线程中同步任务执行完\n5.从微任务队列中取出任务到主线程中，输出3，此微任务中又有微任务，Promise.resolve().then(微任务a).then(微任务b)，将其依次放入微任务队列中；\n6.从微任务队列中取出任务a到主线程中，输出 before timeout；\n7.从微任务队列中取出任务b到主线程中，任务b又注册了一个微任务c，放入微任务队列中；\n8.从微任务队列中取出任务c到主线程中，输出 also before timeout；微任务队列为空\n9.从宏任务队列中取出任务到主线程，此任务中注册了一个微任务d，将其放入微任务队列中，接下来遇到输出4，宏任务队列为空\n10.从微任务队列中取出任务d到主线程 ，输出test，微任务队列为空\n</code></pre>\n</div>\n<h2 id=\"例3\"><a class=\"anchor\" href=\"#例3\">#</a> 例 3</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">1，3，4，2</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到同步任务console.log(1);输出1；\n2.遇到setTimeout 异步宏任务，放入宏任务队列中；\n3.遇到 Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，但由于new Promise没有输出事件，所以接着执行遇到.then；\n4.执行.then，异步微任务,被分发到微任务Event Queue中；\n5.遇到同步任务console.log(3);输出3；\n6.主线程中同步任务执行完，从微任务队列中取出任务到主线程中，p.then 输出4,微任务执行完毕，任务队列为空；\n7.开始执行宏任务setTimeout 输出2,宏任务队列为空；\n</code></pre>\n</div>\n<h2 id=\"例4\"><a class=\"anchor\" href=\"#例4\">#</a> 例 4</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">1，5，10，6，2，3，4，7，8，9</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到同步任务console.log(1);输出1；\n2.遇到setTimeout 异步宏任务，放入宏任务队列中；\n3.遇到 Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出5，所以接着执行遇到.then；\n4.执行.then，异步微任务,被分发到微任务Event Queue中；\n5.遇到setTimeout，异步宏任务;放入宏任务队列中；\n6.遇到同步任务console.log(10);输出10,主线程中同步任务全部执行完;\n7.从微任务队列中取出任务到主线程中，输出6；\n8.在从宏任务队列中取出任务到主线程中，执行第一个setTimeout，输出2，3，4（在宏任务中执行同步,同步，异步微任务）;\n9.在执行第二个setTimeout，输出7，8，9（和8同理）；\n</code></pre>\n</div>\n<h2 id=\"例5\"><a class=\"anchor\" href=\"#例5\">#</a> 例 5</h2>\n<p><figure class=\"highlight js\"><figcaption><span>code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果 (鼠标滑过显示内容)<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">3，2，1</span></li>\n<li>分析</li>\n</ul>\n<div class=\"note info\">\n<pre><code>1.遇到Promise,new Promise在实例化的过程中所执行的代码都是同步进行的,但由于new Promise没有输出事件，所以接着往下执行遇到new Promise没有输出事件再接着往下执行遇到.then,异步微任务,被分发到微任务Event Queue中，再接着 .then 放入微任务\n2.遇到同步任务console.log(3) 输出3，主线程中同步任务执行完；\n3.从微任务队列中取出任务到主线程中，输出2，1，微任务执行完毕，任务队列为空。\n</code></pre>\n</div>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<div class=\"note success\">\n<p>微任务和宏任务的执行顺序是先执行同步任务，先执行同步后异步，异步分为宏任务和微任务两种，异步遇到微任务先执行微任务，执行完后如果没有微任务，就执行下一个宏任务。</p>\n</div>\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Vue/2023/07/12/1/",
            "url": "https://blog.mengcodes.com/Web/Vue/2023/07/12/1/",
            "title": "Websocket的使用",
            "date_published": "2023-07-12T07:48:35.000Z",
            "content_html": "<p>Websocket 在项目中的应用<br />\n<a id=\"more\"></a></p>\n<h1 id=\"在vue3-中使用-websocket\"><a class=\"anchor\" href=\"#在vue3-中使用-websocket\">#</a> 在 Vue3 中使用 Websocket</h1>\n<h2 id=\"在utils目录下新建-websocketjs文件\"><a class=\"anchor\" href=\"#在utils目录下新建-websocketjs文件\">#</a> 在 utils 目录下新建 webSocket.js 文件</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> *  webSocketURL：String    webSocket服务地址    eg: ws://127.0.0.1:8088/websocket (后端接口若为restful风格可以带参数)</span></span><br><span class=\"line\"><span class=\"comment\"> *  callback：为带一个参数的回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> *  message：String 要传递的参数值（不是一个必要的参数）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化webSocket</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">webSocketInit</span>(<span class=\"params\">webSocketURL</span>)</span>&#123;      <span class=\"comment\">// ws://127.0.0.1:8088/websocket</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket = <span class=\"keyword\">new</span> WebSocket(webSocketURL);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onopen = <span class=\"built_in\">this</span>.onOpenwellback;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onmessage = <span class=\"built_in\">this</span>.onMessageCallback;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onerror = <span class=\"built_in\">this</span>.onErrorCallback;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onclose = <span class=\"built_in\">this</span>.onCloseCallback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义回调函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setOpenCallback</span>(<span class=\"params\">callback</span>)</span>&#123; <span class=\"comment\">//  与服务端连接打开回调函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onopen = callback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setMessageCallback</span>(<span class=\"params\">callback</span>)</span>&#123;   <span class=\"comment\">//  与服务端发送消息回调函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onmessage = callback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setErrorCallback</span>(<span class=\"params\">callback</span>)</span>&#123; <span class=\"comment\">//  与服务端连接异常回调函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onerror = callback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setCloseCallback</span>(<span class=\"params\">callback</span>)</span>&#123; <span class=\"comment\">//  与服务端连接关闭回调函数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.onclose = callback;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">close</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.close();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sendMessage</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webSocket.send(message);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在文件中引用\"><a class=\"anchor\" href=\"#在文件中引用\">#</a> 在文件中引用</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> webSocket <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/webSocket&#x27;</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化websocket</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWebsocket</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> webSocketUrl = <span class=\"keyword\">import</span>.meta.env.VITE_APP_SOCKET_API;</span><br><span class=\"line\">  webSocket.webSocketInit(webSocketUrl + <span class=\"string\">`/websocket/platform<span class=\"subst\">$&#123;id&#125;</span>`</span>); <span class=\"comment\">//初始化webSocket</span></span><br><span class=\"line\">  webSocket.setOpenCallback(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;连接建立成功&quot;</span>,res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  webSocket.setMessageCallback(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resData = <span class=\"built_in\">JSON</span>.parse(res.data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;接收到回信&#x27;</span>, resData);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, type &#125; = resData;</span><br><span class=\"line\">    <span class=\"comment\">// 根据不同的type 去执行不同的操作 </span></span><br><span class=\"line\">    <span class=\"comment\">// 登录</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;3&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; nickName, userDept, userName &#125; = data;</span><br><span class=\"line\">      ···</span><br><span class=\"line\">      <span class=\"comment\">// 退出</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;4&#x27;</span>) &#123;</span><br><span class=\"line\">      ···</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;5&#x27;</span>) &#123;</span><br><span class=\"line\">      ···</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  webSocket.setErrorCallback(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;连接异常&#x27;</span>, res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"uniappvue2中使用websocket\"><a class=\"anchor\" href=\"#uniappvue2中使用websocket\">#</a> uniapp（vue2）中使用 websocket</h1>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化时调用</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.connectSocket()</span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"comment\">//连接websocket</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">connectSocket</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;调用连接websocket&#x27;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask = uni.connectSocket(&#123;</span><br><span class=\"line\">        url:</span><br><span class=\"line\">          globalConfig.webSocketUrl +</span><br><span class=\"line\">          <span class=\"string\">`/websocket/uniapp<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.$store.state.userInfo.user.userId&#125;</span>`</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;websocket连接成功&#x27;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">fail</span>(<span class=\"params\">err</span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;报错&#x27;</span>, err);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask.onOpen(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;WebSocket连接已打开！&#x27;</span>);</span><br><span class=\"line\">        that.heart()</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask.onMessage(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> resData = <span class=\"built_in\">JSON</span>.parse(res.data);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;接收到回信&#x27;</span>, resData);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data, type &#125; = resData;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"string\">&#x27;6&#x27;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask.onError(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;WebSocket连接打开失败，请检查！&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">        <span class=\"comment\">//进入重新连接</span></span><br><span class=\"line\">        that.reconnect();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// // 监听连接关闭 -</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask.onClose(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;WebSocket连接关闭！&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// clearInterval(that.timer)</span></span><br><span class=\"line\">        <span class=\"comment\">// that.timer = &#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// if (!that.isClose) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// that.reconnect()</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// console.log(this.socketTask)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//进入重新连接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">reconnect</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;进入断线重连&#x27;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// this.socketTask.close();</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socketTask = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.connectSocket();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sendSocketMessage</span>(<span class=\"params\">msg</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送信息&#x27;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socketTask.send(&#123;</span><br><span class=\"line\">          data: msg,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送成功&#x27;</span>);</span><br><span class=\"line\">            reslove(res);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">fail</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送失败&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">            reject(res);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//心跳</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">heart</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.timer);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.timer = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> msg = &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;heartbeat&#x27;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        that</span><br><span class=\"line\">          .sendSocketMessage(<span class=\"built_in\">JSON</span>.stringify(msg))</span><br><span class=\"line\">          .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;心跳成功&#x27;</span>);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .catch(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送失败&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;, <span class=\"number\">200000</span>);</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Vue"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Webpack/2021/12/23/1/",
            "url": "https://blog.mengcodes.com/Web/Webpack/2021/12/23/1/",
            "title": "Webpack基础",
            "date_published": "2021-12-23T08:32:30.000Z",
            "content_html": "<p>学习一下 <span class=\"red\">Webpack</span>, 顺便记录一下。<br />\n<a id=\"more\"></a></p>\n<h1 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h1>\n<ul>\n<li>本质上，<span class=\"red\">Webpack</span> 是一个用于现代 <span class=\"red\">JavaScript</span> 应用程序的 <span class=\"blue\">静态模块打包工具</span>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图 (dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。</li>\n</ul>\n<h2 id=\"入口entry\"><a class=\"anchor\" href=\"#入口entry\">#</a> 入口（entry）</h2>\n<ul>\n<li>入口起点 (entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图 (dependency graph) 的开始。默认值是 ./src/index.js，可以通过配置文件 (webpack.config.js) 修改。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"输出output\"><a class=\"anchor\" href=\"#输出output\">#</a> 输出 (output)</h2>\n<ul>\n<li>output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>) <span class=\"comment\">// 引入node.js的path模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">// 打包之后的名字</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>), <span class=\"comment\">// 打包之后的路径  注意要使用绝对路径 __dirname表示获取到当前webpack.congfig.js 的物理路径， &#x27;./dist&#x27;表示基于这个物理路径解析到当前目录下的dist</span></span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>, <span class=\"comment\">// 打包时清除上次缓存</span></span><br><span class=\"line\">    assetModuleFilename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span> <span class=\"comment\">// 静态资源打包之后路径及命名 contenthash 根据文件内容生产哈希字符串 ext 扩展名 [] webpack系统自带的默认的生产文件名的方法</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"loader加载器\"><a class=\"anchor\" href=\"#loader加载器\">#</a> loader (加载器)</h2>\n<ul>\n<li>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。loader 可以让 webpack 解析其他类型的文件，并将它们转换为有效 模块。在 webpack 的配置中，loader 有两个属性：<br />\ntest 属性，识别出哪些文件会被转换。<br />\nuse 属性，定义出在进行转换时，应该使用哪个 loader。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>) <span class=\"comment\">// 引入node.js的path模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">// 打包之后的名字</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>), <span class=\"comment\">// 打包之后的路径  注意要使用绝对路径 __dirname表示获取到当前webpack.congfig.js 的物理路径， &#x27;./dist&#x27;表示基于这个物理路径解析到当前目录下的dist</span></span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>, <span class=\"comment\">// 打包时清除上次缓存</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(css|less)$/</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;less-loader&#x27;</span>] <span class=\"comment\">// 后面先执行 逆序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"插件plugin\"><a class=\"anchor\" href=\"#插件plugin\">#</a> 插件 (plugin)</h2>\n<ul>\n<li>webpack 编译器经过加工之后生成目标文件，比如生成 js，css 文件，webpack 编译的过程需要一些工具来帮忙，这些工具就是插件。loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量等。</li>\n<li>想要使用一个插件，你只需要 require () 它，然后把它添加到 plugins 数组中。多数插件可以通过选项 (option) 自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建一个插件实例。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    clean: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    assetModuleFilename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span> </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">&#x27;inline-source-map&#x27;</span>,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;./index.html&#x27;</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;app.html&#x27;</span>,</span><br><span class=\"line\">      inject: <span class=\"string\">&#x27;body&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>: <span class=\"string\">&#x27;./dist&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.png$/</span>,  <span class=\"comment\">// 正则 //  .png . 需要转化 \\.png  $ 表示以png作为拓展名的这种类型的文件</span></span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/resource&#x27;</span>,</span><br><span class=\"line\">        generator: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// filename: &#x27;images/test.png&#x27; //</span></span><br><span class=\"line\">          filename: <span class=\"string\">&#x27;images/[contenthash][ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.svg$/</span>,</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/inline&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.txt$/</span>, </span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset/source&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jpg$/</span>,</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">        parser: &#123;</span><br><span class=\"line\">          dataUrlCondition: &#123;</span><br><span class=\"line\">            maxSize: <span class=\"number\">4</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"模式mode\"><a class=\"anchor\" href=\"#模式mode\">#</a> 模式 (mode)</h2>\n<ul>\n<li>通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。<br />\n<figure class=\"highlight js\"><figcaption><span>webpack</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"浏览器兼容性browser-compatibility\"><a class=\"anchor\" href=\"#浏览器兼容性browser-compatibility\">#</a> 浏览器兼容性 (browser compatibility)</h2>\n<ul>\n<li>Webpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）</li>\n</ul>\n<h2 id=\"环境environment\"><a class=\"anchor\" href=\"#环境environment\">#</a> 环境 (environment)</h2>\n<ul>\n<li>Webpack 5 运行于 Node.js v10.13.0+ 的版本。<br />\n<img data-src=\"https://s2.loli.net/2021/12/23/jh6sPfOzButMXrG.png\" alt=\"image.png\" /><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Webpack"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Ts/2021/12/03/1/",
            "url": "https://blog.mengcodes.com/Web/Ts/2021/12/03/1/",
            "title": "TS手册",
            "date_published": "2021-12-03T07:22:09.000Z",
            "content_html": "<p>学习一下 <span class=\"red\">TypeScript</span>, 顺便记录一下。<br />\n<a id=\"more\"></a></p>\n<h1 id=\"基础类型\"><a class=\"anchor\" href=\"#基础类型\">#</a> 基础类型</h1>\n<h2 id=\"布尔值\"><a class=\"anchor\" href=\"#布尔值\">#</a> 布尔值</h2>\n<ul>\n<li>true/false<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isDone: boolean = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h2>\n<ul>\n<li>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。这些浮点数的类型是 number。除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015 中引入的二进制和八进制字面量。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: number = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: number = <span class=\"number\">0xf00d</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryLiteral: number = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> octalLiteral: number = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<ul>\n<li>和 JavaScript 一样，可以使用双引号（&quot;）或单引号（'）表示字符串。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name: string = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>还可以使用 模板字符串。 这种字符串是被反引号包围（`），并且以 ${expr} 这种形式嵌入表达式<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name: string = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age: number = <span class=\"string\">&#x27;22&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> text: string = <span class=\"string\">`my name is &amp;&#123;name&#125;, my age is <span class=\"subst\">$&#123;age&#125;</span>;`</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<ul>\n<li>有两种方式可以定义数组。</li>\n<li>第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> list: number[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li>第二种方式是使用数组泛型，Array &lt;元素类型&gt;：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">Array</span>&lt;number&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"元组-tuple\"><a class=\"anchor\" href=\"#元组-tuple\">#</a> 元组 Tuple</h2>\n<ul>\n<li>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x: [string, number];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">22</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\">x = [<span class=\"number\">22</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>]; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h2>\n<ul>\n<li>enum 类型是对 JavaScript 标准数据类型的一个补充。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red, Green, Blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> color: Color = Color.Red;</span><br></pre></td></tr></table></figure></li>\n<li>默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 1 开始编号<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red = <span class=\"number\">1</span>, Green, Blue = <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> color: Color = Color.Red;</span><br></pre></td></tr></table></figure></li>\n<li>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red = <span class=\"number\">1</span>, Green, Blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> colorName: string = Color[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colorName); <span class=\"comment\">// Green</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"函数类型\"><a class=\"anchor\" href=\"#函数类型\">#</a> 函数类型</h2>\n<ul>\n<li>为函数定义类型。我们可以给每个参数添加类型之后再为函数本身添加返回值类型<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\">a: number,b: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 参数的个数必须要完全相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\">a: number,b?: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func2&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置可选参数必须放最后面</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2(<span class=\"number\">1</span>) <span class=\"comment\">// ok b为可选参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func3</span> (<span class=\"params\">a: number,b: number = <span class=\"number\">10</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func3&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置参数b的默认值 （设置默认值的参数必须放最后面）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func4</span> (<span class=\"params\">a: number,b: number, ...rest: number[]</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func4&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置接收任意数量的参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>使用函数表达式<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func1: <span class=\"function\">(<span class=\"params\">a: number, b: number</span>) =&gt;</span> string = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a: number, b: number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"any\"><a class=\"anchor\" href=\"#any\">#</a> Any</h2>\n<ul>\n<li>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型，那么我们可以使用 any 类型来标记这些变量<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: any = <span class=\"literal\">false</span>;</span><br><span class=\"line\">a = <span class=\"string\">&#x27;zhangsan&#x27;</span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">a = <span class=\"number\">22</span>; <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure></li>\n<li>当你只知道一部分数据的类型时，any 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list: any[] = [<span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">list[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"void\"><a class=\"anchor\" href=\"#void\">#</a> Void</h2>\n<ul>\n<li>void 类型像是与 any 类型相反，它表示没有任何类型。只能赋予它 undefined 和 null。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> unusable: <span class=\"keyword\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"null-和-undefined\"><a class=\"anchor\" href=\"#null-和-undefined\">#</a> Null 和 Undefined</h2>\n<ul>\n<li>TypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。默认情况下 null 和 undefined 是所有类型的子类型。和 void 相似，它们的本身的类型用处不是很大：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n: <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"never\"><a class=\"anchor\" href=\"#never\">#</a> Never</h2>\n<ul>\n<li>never 类型表示的是那些永不存在的值的类型。</li>\n</ul>\n<h2 id=\"object\"><a class=\"anchor\" href=\"#object\">#</a> Object</h2>\n<ul>\n<li>Object 表示非原始类型，也就是除 number，string，boolean，symbol，null 或 undefined 之外的类型。</li>\n</ul>\n<h1 id=\"类型断言\"><a class=\"anchor\" href=\"#类型断言\">#</a> 类型断言</h1>\n<ul>\n<li>绕过编译器的类型推断，手动指定一个值的类型</li>\n<li>有两种方式。第一种：&lt;类型&gt; 变量<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: any = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: number = (&lt;string&gt;someValue).length;</span><br></pre></td></tr></table></figure></li>\n<li>第二种：变量 as 类型<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: any = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: number = (someValue <span class=\"keyword\">as</span> string).length;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"接口-interface\"><a class=\"anchor\" href=\"#接口-interface\">#</a> 接口  Interface</h1>\n<ul>\n<li>可以理解为一种规范，约束对象的结构。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submit</span> (<span class=\"params\">params: Params</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params.title)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params.content)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">submit(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;213&#x27;</span>,</span><br><span class=\"line\">  content: <span class=\"string\">&#x27;334&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"可选属性\"><a class=\"anchor\" href=\"#可选属性\">#</a> 可选属性</h2>\n<ul>\n<li>接口里的属性不全都是必需的。(属性名？: 类型)<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">  subTitle?: string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"只读属性\"><a class=\"anchor\" href=\"#只读属性\">#</a> 只读属性</h2>\n<ul>\n<li>一些对象属性只能在对象刚刚创建的时候修改其值。属性名之前加 readonly 来指定只读属性。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  title: string</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">  subTitle?: string</span><br><span class=\"line\">  readonly author: string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"动态成员\"><a class=\"anchor\" href=\"#动态成员\">#</a> 动态成员</h2>\n<ul>\n<li>有时候不知道具体的字段名，是动态的，例如 缓存<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Params &#123;</span><br><span class=\"line\">  [key: string]: string</span><br><span class=\"line\">  <span class=\"comment\">// key不是固定的，可以用任意名称代替 如props</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Js",
                "Ts"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Js/2021/11/16/1/",
            "url": "https://blog.mengcodes.com/Web/Js/2021/11/16/1/",
            "title": "请求动画帧 requestAnimationFrame",
            "date_published": "2021-11-16T09:13:34.000Z",
            "content_html": "<p>项目中遇到用 <span class=\"blue\">setInterval</span> 写的滚动的看板，在低配置的电视上比较卡顿， 同事推荐了 <span class=\"blue\">请求动画帧</span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dpbmRvdy9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU=\">requestAnimationFrame</span><br />\n<a id=\"more\"></a></p>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p><span class=\"red\">window.requestAnimationFrame()</span> 告诉浏览器 —— 你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p>\n<ul>\n<li>注意：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用<span class=\"red\"> window.requestAnimationFrame ()</span></li>\n</ul>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><span class=\"red\">window.requestAnimationFrame(callback);</span></p>\n<h2 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h2>\n<p><span class=\"blue\">callback</span><br />\n 下一次重绘之前更新动画帧所调用的函数 (即上面所说的回调函数)。该回调函数会被传入 <span class=\"blue\">DOMHighResTimeStamp</span> 参数，该参数与<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1BlcmZvcm1hbmNlL25vdw==\"> performance.now ()</span> 的返回值相同，它表示<span class=\"blue\"> requestAnimationFrame ()</span> 开始去执行回调函数的时刻。</p>\n<ul>\n<li><span class=\"blue\">requestAnimationFrame()</span> 方法返回一个精确到毫秒的 <span class=\"blue\">DOMHighResTimeStamp</span> 。</li>\n</ul>\n<h2 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h2>\n<p>一个 long 整数，请求 ID ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 <span class=\"blue\">window.cancelAnimationFrame()</span> 以取消回调函数。</p>\n<h2 id=\"滚动例子\"><a class=\"anchor\" href=\"#滚动例子\">#</a> 滚动例子</h2>\n<p><figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">&lt;div id=<span class=\"string\">&#x27;scroll&#x27;</span>&gt;</span><br><span class=\"line\">  <span class=\"comment\">// ... 循环的代码</span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"comment\">// css</span></span><br><span class=\"line\">#scroll &#123;</span><br><span class=\"line\">  height: 200px</span><br><span class=\"line\">  overflow: auto </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> scroll = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;scroll&#x27;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  scroll.scrollTop = scroll.scrollTop + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (scroll.scrollTop &gt;= scroll.scrollHeight - scroll.offsetHeight) &#123;</span><br><span class=\"line\">    scroll.scrollTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  requestAnimationFrame(scroll);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scroll();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"自定义时间间隔\"><a class=\"anchor\" href=\"#自定义时间间隔\">#</a> 自定义时间间隔</h2>\n<ul>\n<li>如果我想自己设定一个时间，不让跟着屏幕刷新率来，如何操作？</li>\n<li>利用固定的时间差 参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mYTU1MTJkZmI0ZjU=\">简书：我是一个前端的博客</span><br />\n <figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> scroll = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;scroll&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//当前执行时间</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nowTime = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//记录每次动画执行结束的时间</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> lastTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"comment\">//我们自己定义的动画时间差值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> diffTime = <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//记录当前时间</span></span><br><span class=\"line\">  nowTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"comment\">// 当前时间-上次执行时间如果大于diffTime，那么执行动画，并更新上次执行时间</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(nowTime-lastTime &gt; diffTime)&#123;</span><br><span class=\"line\">      lastTime = nowTime</span><br><span class=\"line\">      scroll.scrollTop = scroll.scrollTop + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (scroll.scrollTop &gt;= scroll.scrollHeight - scroll.offsetHeight) &#123;</span><br><span class=\"line\">        scroll.scrollTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  requestAnimationFrame(scroll);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scroll();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>与 <span class=\"blue\">setTimeout</span> 和 <span class=\"blue\">setInterval</span> 不同，<span class=\"blue\">requestAnimationFrame</span> 不需要设置时间间隔，是根据浏览器屏幕刷新次数来的，一般来说，这个频率为每秒 60 帧，如果要设置间隔，参考上文方法。体验来讲，确实比较流畅，特别是低配置车间电视上。</li>\n<li>在大多数浏览器里，当 <span class=\"blue\">requestAnimationFrame()</span> 运行在后台标签页或者隐藏的 <span class=\"blue\">&lt;iframe&gt;</span> 里时，<span class=\"blue\">requestAnimationFrame()</span> 会被暂停调用以提升性能和电池寿命。</li>\n<li>存在兼容问题，其他浏览器需要加前缀。</li>\n</ul>\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": []
        },
        {
            "id": "https://blog.mengcodes.com/Web/Js/2021/11/15/1/",
            "url": "https://blog.mengcodes.com/Web/Js/2021/11/15/1/",
            "title": "跳出forEach循环",
            "date_published": "2021-11-15T08:50:01.000Z",
            "content_html": "<p>有些业务场景需要用的 <span class=\"red\">forEach</span> 比如需要遍历复杂数据，只要出现一个满足条件的数据就终止掉整个循环。<br />\n<a id=\"more\"></a></p>\n<h2 id=\"跳出本次循环\"><a class=\"anchor\" href=\"#跳出本次循环\">#</a> 跳出本次循环</h2>\n<p><figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"跳出整体循环\"><a class=\"anchor\" href=\"#跳出整体循环\">#</a> 跳出整体循环</h2>\n<ul>\n<li><span class=\"red\">forEach</span> 无法通过正常流程 (如 <span class=\"red\">break</span>) 终止循环，但可通过抛出异常的方式实现终止循环<br />\n <figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;终止循环&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 打印如图：<br />\n<img data-src=\"https://i.loli.net/2021/11/15/piuhXeOL7kIWs2f.png\" alt=\"image.png\" /><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "Js"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Vue/2021/02/22/1/",
            "url": "https://blog.mengcodes.com/Web/Vue/2021/02/22/1/",
            "title": "Vuex入门及使用",
            "date_published": "2021-02-22T07:54:46.000Z",
            "content_html": "<p>一个小例子掌握 Vuex 入门知识<br />\n<a id=\"more\"></a></p>\n<p>自己也是通过学习视频才了解的，前排感谢 B 站 up 主 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWg3NDExTjdiZz9wPTE=\"> 云繁 EST </span></p>\n<h1 id=\"vuex概述\"><a class=\"anchor\" href=\"#vuex概述\">#</a> Vuex 概述</h1>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。Vuex 是实现组件全局状态（数据）管理的一种机制，可以方便地实现组件之间数据的共享。</p>\n<h1 id=\"vuex的基本使用\"><a class=\"anchor\" href=\"#vuex的基本使用\">#</a> Vuex 的基本使用</h1>\n<h2 id=\"1安装vuex依赖包\"><a class=\"anchor\" href=\"#1安装vuex依赖包\">#</a> 1. 安装 vuex 依赖包</h2>\n<p><figure class=\"highlight js\"><figcaption><span>安装vuex依赖包</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuex --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2导入vuex包\"><a class=\"anchor\" href=\"#2导入vuex包\">#</a> 2. 导入 Vuex 包</h2>\n<p><figure class=\"highlight js\"><figcaption><span>导入</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3创建store对象\"><a class=\"anchor\" href=\"#3创建store对象\">#</a> 3. 创建 store 对象</h2>\n<p><figure class=\"highlight js\"><figcaption><span>创建store对象</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// state 中存放的就是全局共享的数据</span></span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4将store对象挂载到-vue-实例中\"><a class=\"anchor\" href=\"#4将store对象挂载到-vue-实例中\">#</a> 4. 将 store 对象挂载到 vue 实例中</h2>\n<p><figure class=\"highlight js\"><figcaption><span>将store对象挂载到 vue 实例中</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  <span class=\"comment\">// 将创建的共享数据对象，挂载到Vue实例中</span></span><br><span class=\"line\">  <span class=\"comment\">// 所有组件中，都可以直接从 store 中获取全局的数据</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><br />\n 我们可以通过一个小例子来熟悉 vuex 的用法：<span class=\"blue\">父组件 App.vue 上引入两个子组件，一个加法操作的 add.vue 子组件，一个减法操作的 minus.vue 子组件。父组件引入并渲染 Vuex 中的 全局共享的数据 count，通过加减法的运算来了解 count 发生的变化。</span></p>\n<ul>\n<li>我们把两个组件分隔开 准备工作完成后的 App.vue 代码如下：<br />\n<figure class=\"highlight js\"><figcaption><span>代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;Add&gt;&lt;/Add&gt;</span><br><span class=\"line\">    &lt;p&gt;--------------------------&lt;/p&gt;</span><br><span class=\"line\">    &lt;Minus&gt;&lt;/Minus&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Add <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/add&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Minus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/minus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Add,</span><br><span class=\"line\">    Minus</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"state\"><a class=\"anchor\" href=\"#state\">#</a> State</h1>\n<p>State 提供唯一的公共数据源，所有共享的数据都要统一放到 Store 的 State 中进行存储。</p>\n<ul>\n<li>我们需要在 add 和 minus 组件中 都能访问到 当前最新的 count 值 有如下两种方式</li>\n</ul>\n<h2 id=\"方法一thisstorestate全局数据名称\"><a class=\"anchor\" href=\"#方法一thisstorestate全局数据名称\">#</a> 方法一：this.$store.state. 全局数据名称</h2>\n<ul>\n<li>在 add 组件中的代码<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;当前count值为：&#123;&#123;$store.state.count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"方法二1从vuex中按需引入-mapstate-对象-2将全局数据映射为当前组件的计算属性\"><a class=\"anchor\" href=\"#方法二1从vuex中按需引入-mapstate-对象-2将全局数据映射为当前组件的计算属性\">#</a> 方法二：①从 vuex 中按需引入 mapState 对象 ②将全局数据映射为当前组件的计算属性</h2>\n<ul>\n<li>在 minus 组件中的代码<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从vuex中按需引入 mapState 对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 将全局数据映射为当前组件的计算属性</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState([<span class=\"string\">&#x27;count&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\">&lt;h3&gt;当前count值为：&#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"getter\"><a class=\"anchor\" href=\"#getter\">#</a> Getter</h1>\n<p>Getter 用于对 Store 中的数据进行加工处理形成新的数据<br />\n① Getter 可以对 Store 中已经存在的数据加工处理形成新的数据，类似 Vue 的计算属性<br />\n② Store 中数据发生变化，Getter 的数据也会跟着变化</p>\n<ul>\n<li>我们可以在 store 的 state 中新加一个 doubleCount 返回当前 count 数值的 2 倍<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`看我翻倍----  <span class=\"subst\">$&#123;state.count * <span class=\"number\">2</span>&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>Getter 相当于计算属性，使用方法与 state 中的数据一样<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在add组件中的代码</span></span><br><span class=\"line\">&lt;h3&gt;当前doubleCount值为：&#123;&#123;$store.state.doubleCount&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\"><span class=\"comment\">// 在minus组件中的代码</span></span><br><span class=\"line\"><span class=\"comment\">// 从vuex中按需引入 mapGetters 对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 将全局数据映射为当前组件的计算属性</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">&#x27;doubleCount&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"mutation\"><a class=\"anchor\" href=\"#mutation\">#</a> Mutation</h1>\n<p>Mutation 用于变更 Store 中的数据<br />\n① 只能通过 Mutation 变更 Store 中的数据，不可以直接操作 Store 中的数据<br />\n② 通过这种方式虽然操作稍微繁琐，但是可以集中监控所有公共数据的变化<br />\n <figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store 目录下的 index.js 定义 Mutation</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收的参数 一个是 store里面的state，另一个是我们传的其他数据</span></span><br><span class=\"line\">    add (state, step) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果无参数</span></span><br><span class=\"line\">      step ? state.count += step : state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minus (state, step) &#123;</span><br><span class=\"line\">      step ? state.count -= step : state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>我们可以在 add 组件和 minus 组件中添加按钮，动态改变 State 中 count 的值，有以下两种方式</li>\n</ul>\n<h2 id=\"方法一-thisstorecommit方法名称-其他参数\"><a class=\"anchor\" href=\"#方法一-thisstorecommit方法名称-其他参数\">#</a> 方法一: this.$store.commit (' 方法名称 ', 其他参数)</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add组件代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add1&quot;</span>&gt; +<span class=\"number\">1</span> &lt;/button&gt;</span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add2&quot;</span>&gt; +N &lt;/button&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  add1 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  add2 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"built_in\">this</span>.numN)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二1从vuex中按需引入-mapmutations-函数-2将需要的-mutations-函数映射为当前组件的-methods-方法\"><a class=\"anchor\" href=\"#方法二1从vuex中按需引入-mapmutations-函数-2将需要的-mutations-函数映射为当前组件的-methods-方法\">#</a> 方法二：①从 vuex 中按需引入 mapMutations 函数 ②将需要的 mutations 函数，映射为当前组件的 methods 方法</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// minus组件代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce1&quot;</span>&gt; -<span class=\"number\">1</span> &lt;/button&gt;</span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce2&quot;</span>&gt; -N &lt;/button&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapMutations([<span class=\"string\">&#x27;minus&#x27;</span>]),</span><br><span class=\"line\">  reduce1 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minus()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reduce2 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minus(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"action\"><a class=\"anchor\" href=\"#action\">#</a> Action</h1>\n<p>Action 用于处理异步任务。<br />\n如果通过异步操作变更数据，必须通过 Action，而不能使用 Mutation，但是在 Action 中还是要通过触发 Mutation 的方式间接变更数据。</p>\n<ul>\n<li>我们可以在 store 目录下的 index.js 中声明两个 异步方法 addAsync 和 minusAsync<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    add (state, step) &#123;</span><br><span class=\"line\">      step ? state.count += step : state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minus (state, step) &#123;</span><br><span class=\"line\">      step ? state.count -= step : state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    addAsync (context, step) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;add&#x27;</span>, step)</span><br><span class=\"line\">      &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minusAsync (context, step) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;minus&#x27;</span>, step)</span><br><span class=\"line\">      &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>触发 Action 函数的两种方式</li>\n</ul>\n<h2 id=\"方法一thisstoredispatch方法名称-其他参数\"><a class=\"anchor\" href=\"#方法一thisstoredispatch方法名称-其他参数\">#</a> 方法一：this.$store.dispatch (' 方法名称 ', 其他参数)</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add组件代码</span></span><br><span class=\"line\"><span class=\"comment\">// 页面</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;add3&quot;</span>&gt; +N Async &lt;/button&gt;</span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  add3 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二1从-vuex-中按需引入-mapactons-函数-2将指定的-actions-函数映射为当前组件的-methods-函数\"><a class=\"anchor\" href=\"#方法二1从-vuex-中按需引入-mapactons-函数-2将指定的-actions-函数映射为当前组件的-methods-函数\">#</a> 方法二：①从 vuex 中按需引入 mapActons 函数 ②将指定的 actions 函数，映射为当前组件的 methods 函数</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// minus组件代码</span></span><br><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;reduce3&quot;</span>&gt; -&#123;&#123;numN&#125;&#125; Async &lt;/button&gt;</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">···</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">&#x27;minusAsync&#x27;</span>])</span><br><span class=\"line\">  reduce3 () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.minusAsync(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"module\"><a class=\"anchor\" href=\"#module\">#</a> Module</h1>\n<p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块 —— 从上至下进行同样方式的分割：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>同样，对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// tate(局部状态),commit,roosState（根状态）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((state.count + rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">&#x27;increment&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：<br />\n<figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state(局部状态),getters（全局getters对象）,roosState（根状态）</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"module-其他内容\"><a class=\"anchor\" href=\"#module-其他内容\">#</a> Module 其他内容</h2>\n<ul>\n<li>Module 其他内容 请移步官网 <span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS9tb2R1bGVzLmh0bWw=\"> modules </span></li>\n</ul>\n<hr />\n<p><span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Vue",
                "Vuex"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Wechat/2021/02/18/1/",
            "url": "https://blog.mengcodes.com/Web/Wechat/2021/02/18/1/",
            "title": "微信小程序swiper高度自适应",
            "date_published": "2021-02-18T08:21:13.000Z",
            "content_html": "<p><span class=\"red\">微信小程序 swiper</span> 高度自适应<br />\n<a id=\"more\"></a><br />\n 微信小程序自带的滑块视图容器 <span class=\"kbd red\">swiper</span> 不能通过设置<span class=\"red\"> height</span> 属性使高度自适应，这就导致我们代码开发中，经常出现子组件 <span class=\"kbd red\">swiper-item</span> 高度不一样的问题，影响页面美观。可以通过下面的方法解决。</p>\n<ul>\n<li>在<span class=\"red\"> data</span> 里 声明 变量<span class=\"red\"> clientHeight</span><br />\n<figure class=\"highlight js\"><figcaption><span>方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    clientHeight: <span class=\"number\">0</span></span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>页面 <span class=\"kbd red\">swiper</span> 及  <span class=\"kbd red\">scroll-view</span> 添加高度属性<span class=\"red\"> height</span>，高度值为<span class=\"red\"> clientHeight</span><br />\n<figure class=\"highlight js\"><figcaption><span>方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\">&lt;swiper @change=<span class=\"string\">&quot;changeSwiper&quot;</span> :current=<span class=\"string\">&quot;current&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper&quot;</span> :style=<span class=\"string\">&quot;&#x27;height:&#x27; + clientHeight + &#x27;px&#x27;&quot;</span>&gt;</span><br><span class=\"line\">  &lt;swiper-item v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item, index) in tabsData&quot;</span> :key=<span class=\"string\">&quot;index&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiperItem&quot;</span>&gt;</span><br><span class=\"line\">    &lt;scroll-view scroll-y=<span class=\"string\">&quot;true&quot;</span> :style=<span class=\"string\">&quot;&#x27;height:&#x27; + clientHeight + &#x27;px&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;mainContent&quot;</span>&gt;</span><br><span class=\"line\">        ··· <span class=\"comment\">// 其他代码</span></span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/scroll-view&gt;</span><br><span class=\"line\">  &lt;/swiper-item&gt;</span><br><span class=\"line\">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure></li>\n<li><span class=\"red\">onLoad()</span> 方法中获取高度 使用 <span class=\"red\">wx.getSystemInfo()</span> 方法<br />\n <figure class=\"highlight js\"><figcaption><span>方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三步</span></span><br><span class=\"line\">onLoad () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span></span><br><span class=\"line\">  wx.getSystemInfo(&#123;</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      that.clientHeight = res.windowHeight - <span class=\"number\">44</span> <span class=\"comment\">// 减去44 是因为有 44px 的标题高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// wx.getSystemInfo() 成功时的回调如下</span></span><br><span class=\"line\"><span class=\"comment\">// 属性\t类型\t说明</span></span><br><span class=\"line\"><span class=\"comment\">// brand\tstring\t设备品牌</span></span><br><span class=\"line\"><span class=\"comment\">// model\tstring\t设备型号</span></span><br><span class=\"line\"><span class=\"comment\">// pixelRatio\tnumber\t设备像素比</span></span><br><span class=\"line\"><span class=\"comment\">// screenWidth\tnumber\t屏幕宽度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// screenHeight\tnumber\t屏幕高度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// windowWidth\tnumber\t可使用窗口宽度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// windowHeight\tnumber\t可使用窗口高度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// statusBarHeight\tnumber\t状态栏的高度，单位px</span></span><br><span class=\"line\"><span class=\"comment\">// language\tstring\t微信设置的语言</span></span><br><span class=\"line\"><span class=\"comment\">// version\tstring\t微信版本号</span></span><br><span class=\"line\"><span class=\"comment\">// system\tstring\t操作系统及版本</span></span><br><span class=\"line\"><span class=\"comment\">// platform\tstring\t客户端平台</span></span><br><span class=\"line\"><span class=\"comment\">// fontSizeSetting\tnumber\t用户字体大小（单位px）。以微信客户端「我-设置-通用-字体大小」中的设置为准</span></span><br><span class=\"line\"><span class=\"comment\">// SDKVersion\tstring\t客户端基础库版本</span></span><br><span class=\"line\"><span class=\"comment\">// benchmarkLevel\tnumber\t设备性能等级（仅Android小游戏）。取值为：-2 或 0（该设备无法运行小游戏），-1（性能未知），&gt;=1（设备性能值，该值越高，设备性能越好，目前最高不到50）</span></span><br><span class=\"line\"><span class=\"comment\">// environment\tstring\t小程序当前运行环境</span></span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "微信小程序"
            ]
        },
        {
            "id": "https://blog.mengcodes.com/Web/Vue/2021/02/09/3/",
            "url": "https://blog.mengcodes.com/Web/Vue/2021/02/09/3/",
            "title": "一些Vue公共方法",
            "date_published": "2021-02-09T09:10:33.000Z",
            "content_html": "<p>一些 Vue 公共方法<br />\n<a id=\"more\"></a></p>\n<h1 id=\"common-functions\"><a class=\"anchor\" href=\"#common-functions\">#</a> Common Functions</h1>\n<h2 id=\"vue路由跳转\"><a class=\"anchor\" href=\"#vue路由跳转\">#</a> vue 路由跳转</h2>\n<p><figure class=\"highlight js\"><figcaption><span>方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\"><span class=\"comment\">// 方法放在common.js里</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toPage</span> (<span class=\"params\">path, query</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (query) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">      path,</span><br><span class=\"line\">      query</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">      path</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 其他代码</span></span><br><span class=\"line\">···</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"comment\">// 记得导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  toPage</span><br><span class=\"line\">  ···</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\"><span class=\"comment\">// 挂载在vue全局</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> commonFunction <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./common&#x27;</span></span><br><span class=\"line\">Vue.prototype.$toPage = commonFunction.toPage</span><br><span class=\"line\"><span class=\"comment\">// 第三步</span></span><br><span class=\"line\"><span class=\"comment\">// 页面中使用</span></span><br><span class=\"line\"><span class=\"comment\">// 无参数</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$toPage(<span class=\"string\">`/home`</span>)</span><br><span class=\"line\"><span class=\"comment\">// 有参数</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$toPage(<span class=\"string\">`/AfterLhygOrderPay/AfterLhygOrderPayQrCode/<span class=\"subst\">$&#123;code&#125;</span>/<span class=\"subst\">$&#123;currentPaymentCode&#125;</span>/<span class=\"subst\">$&#123;item.paymentType&#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"comment\">// query</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$toPage(<span class=\"string\">`/customManagement/<span class=\"subst\">$&#123;code&#125;</span>/photos`</span>, addCode)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$toPage(<span class=\"string\">`/Worker/ContractTxt`</span>, &#123; <span class=\"attr\">id</span>: item.id, <span class=\"attr\">contractCode</span>: item.contractCode, <span class=\"attr\">roleName</span>: <span class=\"built_in\">this</span>.roleName &#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"去除字符串空格\"><a class=\"anchor\" href=\"#去除字符串空格\">#</a> 去除字符串空格</h2>\n<p><figure class=\"highlight js\"><figcaption><span>示例</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 去除字符串空格 用法同上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trim</span> (<span class=\"params\">str, isGlobal = <span class=\"literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  str = str.replace(<span class=\"regexp\">/(^\\s+)|(\\s+$)/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isGlobal) str = str.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对象按某个属性排序\"><a class=\"anchor\" href=\"#对象按某个属性排序\">#</a> 对象按某个属性排序</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;金刚&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">120</span>, <span class=\"attr\">weight</span>: <span class=\"number\">180</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;哥斯拉&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">138</span>, <span class=\"attr\">weight</span>: <span class=\"number\">220</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;机械哥斯拉&#x27;</span>, <span class=\"attr\">height</span>: <span class=\"number\">130</span>, <span class=\"attr\">weight</span>: <span class=\"number\">190</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"comment\">// 按某个属性（数字）排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">compare</span>(<span class=\"params\">prop</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1 = a[prop]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value2 = b[prop]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1 - value2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组按某个属性（非数字）排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">prop</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1 = a?.[prop];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value2 = b?.[prop];</span><br><span class=\"line\">    <span class=\"comment\">// return (a.name + &#x27;&#x27;).localeCompare(b.name + &#x27;&#x27;)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1.localeCompare(value2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort(compare(<span class=\"string\">&#x27;height&#x27;</span>)))  <span class=\"comment\">//返回对象height从小到大正向排序</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>下面內容 更新于 2023 年 7 月 12 日</li>\n</ul>\n<h2 id=\"防抖\"><a class=\"anchor\" href=\"#防抖\">#</a> 防抖</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Function&#125;</span> <span class=\"variable\">func</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">wait</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;boolean&#125;</span> <span class=\"variable\">immediate</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;*&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout, args, context, timestamp, result</span><br><span class=\"line\">  <span class=\"keyword\">const</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 据上一次触发时间间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> last = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - timestamp</span><br><span class=\"line\">    <span class=\"comment\">// 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      timeout = <span class=\"built_in\">setTimeout</span>(later, wait - last)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        result = func.apply(context, args)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    context = <span class=\"built_in\">this</span></span><br><span class=\"line\">    timestamp = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callNow = immediate &amp;&amp; !timeout</span><br><span class=\"line\">    <span class=\"comment\">// 如果延时不存在，重新设定延时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) timeout = <span class=\"built_in\">setTimeout</span>(later, wait)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">      result = func.apply(context, args)</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用时 先引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; debounce &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 再调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handlePutOnShelves = debounce(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"节流\"><a class=\"anchor\" href=\"#节流\">#</a> 节流</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span> (<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> callback = fn</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timerId = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"comment\">// 是否是第一次执行</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> firstInvoke = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是第一次触发，直接执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstInvoke) &#123;</span><br><span class=\"line\">      callback.apply(context, args)</span><br><span class=\"line\">      firstInvoke = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果定时器已存在，直接返回。        </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timerId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timerId = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注意这里 将 clearTimeout 放到 内部来执行了</span></span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timerId)</span><br><span class=\"line\">      timerId = <span class=\"literal\">null</span></span><br><span class=\"line\">      callback.apply(context, args)</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个闭包</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> throttled</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"首字母大写\"><a class=\"anchor\" href=\"#首字母大写\">#</a> 首字母大写</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首字母大写</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/( |^)[a-z]/g</span>, <span class=\"function\"><span class=\"params\">L</span> =&gt;</span> L.toUpperCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下划线转驼峰\"><a class=\"anchor\" href=\"#下划线转驼峰\">#</a> 下划线转驼峰</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下划转驼峰</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camelCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/_[a-z]/g</span>, <span class=\"function\"><span class=\"params\">str1</span> =&gt;</span> str1.substr(-<span class=\"number\">1</span>).toUpperCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"根据身份证号码计算年龄\"><a class=\"anchor\" href=\"#根据身份证号码计算年龄\">#</a> 根据身份证号码计算年龄</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据身份证号码计算年龄</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>idCard 身份证</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns </span>返回处理后的字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeAndSexByidCard</span>(<span class=\"params\">idCard:any</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sex = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 计算性别</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idCard.substr(<span class=\"number\">16</span>, <span class=\"number\">1</span>) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        sex = <span class=\"string\">&#x27;1&#x27;</span>; <span class=\"comment\">//男</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sex = <span class=\"string\">&#x27;2&#x27;</span>; <span class=\"comment\">//女</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> birthYear = idCard.substring(<span class=\"number\">6</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> monthBirth = idCard.substring(<span class=\"number\">10</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> birthDay = idCard.substring(<span class=\"number\">12</span>, <span class=\"number\">14</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前年月日</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nowMonth = myDate.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nowDay = myDate.getDay();</span><br><span class=\"line\">    <span class=\"comment\">// 计算年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = myDate.getFullYear() - birthYear;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowMonth &lt; monthBirth || (nowMonth === monthBirth &amp;&amp; nowDay &lt; birthDay)) &#123;</span><br><span class=\"line\">        age -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;sex,age&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动态计算table高度\"><a class=\"anchor\" href=\"#动态计算table高度\">#</a> 动态计算 table 高度</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态计算table高度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>dom el-table结构的dom结构</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>num 页面除table结构之外的内容高度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>tableHeight el-table的height值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTableHeight</span>(<span class=\"params\">dom:any, num:number, tableHeight:any</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tableOffsetTop = dom.offsetTop + num</span><br><span class=\"line\">    <span class=\"keyword\">let</span> windowHeight = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">    tableHeight.value = windowHeight - tableOffsetTop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用时</span></span><br><span class=\"line\"><span class=\"comment\">// 动态设置table高度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTableHeight</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setTableHeight(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.tableOffsetTop&#x27;</span>), <span class=\"number\">80</span>, tableHeight);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"合并表格\"><a class=\"anchor\" href=\"#合并表格\">#</a> 合并表格</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从第一列开始合并，其中maxCol为从第一列开始数，要合并多少列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rowSpanFromStart</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">  nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tab = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">`print-outbound-table-<span class=\"subst\">$&#123;index&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxCol = <span class=\"number\">2</span>,</span><br><span class=\"line\">      val,</span><br><span class=\"line\">      count,</span><br><span class=\"line\">      start;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> col = maxCol - <span class=\"number\">1</span>; col &gt;= <span class=\"number\">0</span>; col--) &#123;</span><br><span class=\"line\">      count = <span class=\"number\">1</span>;</span><br><span class=\"line\">      val = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; tab.rows.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == tab.rows[i].cells[col].innerHTML) &#123;</span><br><span class=\"line\">          count++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//合并</span></span><br><span class=\"line\">            start = i - count;</span><br><span class=\"line\">            tab.rows[start].cells[col].rowSpan = count;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = start + <span class=\"number\">1</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">              tab.rows[j].cells[col].style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count = <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          val = tab.rows[i].cells[col].innerHTML;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//合并，最后几行相同的情况下</span></span><br><span class=\"line\">        start = i - count;</span><br><span class=\"line\">        tab.rows[start].cells[col].rowSpan = count;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = start + <span class=\"number\">1</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">          tab.rows[j].cells[col].style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对象数组是否重复\"><a class=\"anchor\" href=\"#对象数组是否重复\">#</a> 对象数组是否重复</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>arr 如：var arr = [&#123;name: &quot;123&quot;, age : 123&#125;, &#123;name:&quot;1234432&quot;, age : 1234324&#125;]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>key1 如：&quot;name&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>key2 如：&quot;age&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@retutns </span>boolean: true：不存在； false：存在重复</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRepeat</span>(<span class=\"params\">arr, key1, key2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i][key1] === arr[j][key1] &amp;&amp; arr[i][key2] === arr[j][key2]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用时 </span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> temp = isRepeat(list, <span class=\"string\">&#x27;materialCode&#x27;</span>, <span class=\"string\">&#x27;projectId&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"根据状态返回中文\"><a class=\"anchor\" href=\"#根据状态返回中文\">#</a> 根据状态返回中文</h2>\n<p><figure class=\"highlight js\"><figcaption><span>codes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据状态返回中文</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getPlanStatus = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> enumStatus = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">&#x27;已撤销&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">&#x27;待拣货&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"string\">&#x27;待出库&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">4</span>: <span class=\"string\">&#x27;已出库&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">&#x27;待回库&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">6</span>: <span class=\"string\">&#x27;已回库&#x27;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> enumStatus[val];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br />\n<span class=\"label danger\">❤️筱何仔</span></p>\n",
            "tags": [
                "前端",
                "Vue"
            ]
        }
    ]
}